// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from djinni_perf_benchmark.djinni

package com.snapchat.djinni.benchmark;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/** djinni_perf_benchmark: This interface will be implemented in C++ and can be called from any language. */
/*package*/ abstract class DjinniPerfBenchmark {
    public abstract long cppTests();

    public abstract void baseline();

    public abstract void argString(@Nonnull String s);

    public abstract void argBinary(@Nonnull byte[] b);

    public abstract void argDataRef(@Nonnull java.nio.ByteBuffer r);

    public abstract void argDataView(@Nonnull java.nio.ByteBuffer d);

    public abstract void argEnumSixValue(@Nonnull EnumSixValue e);

    public abstract void argRecordSixInt(@Nonnull RecordSixInt r);

    public abstract void argListInt(@Nonnull ArrayList<Long> v);

    public abstract void argArrayInt(@Nonnull long[] v);

    public abstract void argObject(@CheckForNull ObjectPlatform c);

    public abstract void argListObject(@Nonnull ArrayList<ObjectPlatform> l);

    public abstract void argListRecord(@Nonnull ArrayList<RecordSixInt> l);

    public abstract void argArrayRecord(@Nonnull ArrayList<RecordSixInt> a);

    public abstract long returnInt(long i);

    @Nonnull
    public abstract String returnString(int size);

    @Nonnull
    public abstract byte[] returnBinary(int size);

    @CheckForNull
    public abstract ObjectNative returnObject();

    @Nonnull
    public abstract ArrayList<Long> returnListInt(int size);

    @Nonnull
    public abstract long[] returnArrayInt(int size);

    @Nonnull
    public abstract ArrayList<ObjectNative> returnListObject(int size);

    @Nonnull
    public abstract ArrayList<RecordSixInt> returnListRecord(int size);

    @Nonnull
    public abstract ArrayList<RecordSixInt> returnArrayRecord(int size);

    @Nonnull
    public abstract String roundTripString(@Nonnull String s);

    @CheckForNull
    public static native DjinniPerfBenchmark getInstance();

    public static final class CppProxy extends DjinniPerfBenchmark
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public long cppTests()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_cppTests(this.nativeRef);
        }
        private native long native_cppTests(long _nativeRef);

        @Override
        public void baseline()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_baseline(this.nativeRef);
        }
        private native void native_baseline(long _nativeRef);

        @Override
        public void argString(String s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argString(this.nativeRef, s);
        }
        private native void native_argString(long _nativeRef, String s);

        @Override
        public void argBinary(byte[] b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argBinary(this.nativeRef, b);
        }
        private native void native_argBinary(long _nativeRef, byte[] b);

        @Override
        public void argDataRef(java.nio.ByteBuffer r)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argDataRef(this.nativeRef, r);
        }
        private native void native_argDataRef(long _nativeRef, java.nio.ByteBuffer r);

        @Override
        public void argDataView(java.nio.ByteBuffer d)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argDataView(this.nativeRef, d);
        }
        private native void native_argDataView(long _nativeRef, java.nio.ByteBuffer d);

        @Override
        public void argEnumSixValue(EnumSixValue e)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argEnumSixValue(this.nativeRef, e);
        }
        private native void native_argEnumSixValue(long _nativeRef, EnumSixValue e);

        @Override
        public void argRecordSixInt(RecordSixInt r)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argRecordSixInt(this.nativeRef, r);
        }
        private native void native_argRecordSixInt(long _nativeRef, RecordSixInt r);

        @Override
        public void argListInt(ArrayList<Long> v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argListInt(this.nativeRef, v);
        }
        private native void native_argListInt(long _nativeRef, ArrayList<Long> v);

        @Override
        public void argArrayInt(long[] v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argArrayInt(this.nativeRef, v);
        }
        private native void native_argArrayInt(long _nativeRef, long[] v);

        @Override
        public void argObject(ObjectPlatform c)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argObject(this.nativeRef, c);
        }
        private native void native_argObject(long _nativeRef, ObjectPlatform c);

        @Override
        public void argListObject(ArrayList<ObjectPlatform> l)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argListObject(this.nativeRef, l);
        }
        private native void native_argListObject(long _nativeRef, ArrayList<ObjectPlatform> l);

        @Override
        public void argListRecord(ArrayList<RecordSixInt> l)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argListRecord(this.nativeRef, l);
        }
        private native void native_argListRecord(long _nativeRef, ArrayList<RecordSixInt> l);

        @Override
        public void argArrayRecord(ArrayList<RecordSixInt> a)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_argArrayRecord(this.nativeRef, a);
        }
        private native void native_argArrayRecord(long _nativeRef, ArrayList<RecordSixInt> a);

        @Override
        public long returnInt(long i)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnInt(this.nativeRef, i);
        }
        private native long native_returnInt(long _nativeRef, long i);

        @Override
        public String returnString(int size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnString(this.nativeRef, size);
        }
        private native String native_returnString(long _nativeRef, int size);

        @Override
        public byte[] returnBinary(int size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnBinary(this.nativeRef, size);
        }
        private native byte[] native_returnBinary(long _nativeRef, int size);

        @Override
        public ObjectNative returnObject()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnObject(this.nativeRef);
        }
        private native ObjectNative native_returnObject(long _nativeRef);

        @Override
        public ArrayList<Long> returnListInt(int size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnListInt(this.nativeRef, size);
        }
        private native ArrayList<Long> native_returnListInt(long _nativeRef, int size);

        @Override
        public long[] returnArrayInt(int size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnArrayInt(this.nativeRef, size);
        }
        private native long[] native_returnArrayInt(long _nativeRef, int size);

        @Override
        public ArrayList<ObjectNative> returnListObject(int size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnListObject(this.nativeRef, size);
        }
        private native ArrayList<ObjectNative> native_returnListObject(long _nativeRef, int size);

        @Override
        public ArrayList<RecordSixInt> returnListRecord(int size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnListRecord(this.nativeRef, size);
        }
        private native ArrayList<RecordSixInt> native_returnListRecord(long _nativeRef, int size);

        @Override
        public ArrayList<RecordSixInt> returnArrayRecord(int size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_returnArrayRecord(this.nativeRef, size);
        }
        private native ArrayList<RecordSixInt> native_returnArrayRecord(long _nativeRef, int size);

        @Override
        public String roundTripString(String s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_roundTripString(this.nativeRef, s);
        }
        private native String native_roundTripString(long _nativeRef, String s);
    }
}
