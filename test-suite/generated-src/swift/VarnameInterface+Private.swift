// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from varnames.djinni

import DjinniSupport
import DjinniSupportCxx
import Foundation
import TestSuite
import TestSuiteCxx

final class VarnameInterfaceCppProxy: DjinniSupport.CppProxy, TestSuite.VarnameInterface {
    init(_ inst: djinni.swift.AnyValue) { super.init(inst:inst) } 
    func Rmethod(_ RArg: TestSuite.VarnameRecord) throws -> TestSuite.VarnameRecord {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        _params.addValue(VarnameRecordMarshaller.toCpp(RArg))
        var ret = djinni_generated.VarnameInterface_Rmethod(&_params)
        try handleCppErrors(&ret)
        return VarnameRecordMarshaller.fromCpp(ret)
    }
    func Imethod(_ IArg: TestSuite.VarnameInterface) throws -> TestSuite.VarnameInterface {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        _params.addValue(VarnameInterfaceMarshaller.toCpp(IArg))
        var ret = djinni_generated.VarnameInterface_Imethod(&_params)
        try handleCppErrors(&ret)
        return VarnameInterfaceMarshaller.fromCpp(ret)
    }
}
public enum VarnameInterfaceMarshaller: DjinniSupport.Marshaller {
    public typealias SwiftType = TestSuite.VarnameInterface
    public static func fromCpp(_ c: djinni.swift.AnyValue) -> SwiftType {
        return cppInterfaceToSwift(c, { VarnameInterfaceCppProxy(c) as SwiftType })
    }
    public static func toCpp(_ s: SwiftType) -> djinni.swift.AnyValue {
        return swiftInterfaceToCpp(s, { fatalError("n/a") })
    }
}
