// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from data_ref_view.djinni

import DjinniSupport
import DjinniSupportCxx
import Foundation
import TestSuite
import TestSuiteCxx

final class DataRefTestCppProxy: DjinniSupport.CppProxy, TestSuite.DataRefTest {
    init(_ inst: djinni.swift.AnyValue) { super.init(inst:inst) } 
    func sendData(_ data: Foundation.NSData) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        _params.addValue(DjinniSupport.DataRefMarshaller.toCpp(data))
        var ret = djinni_generated.DataRefTest_sendData(&_params)
        try handleCppErrors(&ret)
    }
    func retriveAsBin() throws -> Data {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        var ret = djinni_generated.DataRefTest_retriveAsBin(&_params)
        try handleCppErrors(&ret)
        return BinaryMarshaller.fromCpp(ret)
    }
    func sendMutableData(_ data: Foundation.NSData) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        _params.addValue(DjinniSupport.DataRefMarshaller.toCpp(data))
        var ret = djinni_generated.DataRefTest_sendMutableData(&_params)
        try handleCppErrors(&ret)
    }
    func generateData() throws -> Foundation.NSData {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        var ret = djinni_generated.DataRefTest_generateData(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.DataRefMarshaller.fromCpp(ret)
    }
    func dataFromVec() throws -> Foundation.NSData {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        var ret = djinni_generated.DataRefTest_dataFromVec(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.DataRefMarshaller.fromCpp(ret)
    }
    func dataFromStr() throws -> Foundation.NSData {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        var ret = djinni_generated.DataRefTest_dataFromStr(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.DataRefMarshaller.fromCpp(ret)
    }
    func sendDataView(_ data: Foundation.NSData) throws -> Data {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        _params.addValue(DjinniSupport.DataViewMarshaller.toCpp(data))
        var ret = djinni_generated.DataRefTest_sendDataView(&_params)
        try handleCppErrors(&ret)
        return BinaryMarshaller.fromCpp(ret)
    }
    func recvDataView() throws -> Foundation.NSData {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        var ret = djinni_generated.DataRefTest_recvDataView(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.DataViewMarshaller.fromCpp(ret)
    }
}
public enum DataRefTestMarshaller: DjinniSupport.Marshaller {
    public typealias SwiftType = TestSuite.DataRefTest
    public static func fromCpp(_ c: djinni.swift.AnyValue) -> SwiftType {
        return cppInterfaceToSwift(c, { DataRefTestCppProxy(c) as SwiftType })
    }
    public static func toCpp(_ s: SwiftType) -> djinni.swift.AnyValue {
        return swiftInterfaceToCpp(s, { fatalError("n/a") })
    }
}
public class DataRefTest_statics {
    public static func create() throws -> TestSuite.DataRefTest {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.DataRefTest_create(&_params)
        try handleCppErrors(&ret)
        return DataRefTestMarshaller.fromCpp(ret)
    }
}
