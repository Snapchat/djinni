// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from multiple_inheritance.djinni

import DjinniSupport
import DjinniSupportCxx
import Foundation
import TestSuite
import TestSuiteCxx

/**
 * Tester for the ability to call two interfaces which might be
 * implemented on the same object.  That's not relevant in all
 * languages, due to the details of multiple inheritance and object
 * comparison.
 */
final class ListenerCallerCppProxy: DjinniSupport.CppProxy, TestSuite.ListenerCaller {
    init(_ inst: djinni.swift.AnyValue) { super.init(inst:inst) } 
    func callFirst() throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        var ret = djinni_generated.ListenerCaller_callFirst(&_params)
        try handleCppErrors(&ret)
    }
    func callSecond() throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(inst)
        var ret = djinni_generated.ListenerCaller_callSecond(&_params)
        try handleCppErrors(&ret)
    }
}
public enum ListenerCallerMarshaller: DjinniSupport.Marshaller {
    public typealias SwiftType = TestSuite.ListenerCaller
    public static func fromCpp(_ c: djinni.swift.AnyValue) -> SwiftType {
        return cppInterfaceToSwift(c, { ListenerCallerCppProxy(c) as SwiftType })
    }
    public static func toCpp(_ s: SwiftType) -> djinni.swift.AnyValue {
        return swiftInterfaceToCpp(s, { fatalError("n/a") })
    }
}
public class ListenerCaller_statics {
    public static func _init(_ firstL: TestSuite.FirstListener, secondL: TestSuite.SecondListener) throws -> TestSuite.ListenerCaller {
        var _params = djinni.swift.ParameterList()
        _params.addValue(FirstListenerMarshaller.toCpp(firstL))
        _params.addValue(SecondListenerMarshaller.toCpp(secondL))
        var ret = djinni_generated.ListenerCaller_init(&_params)
        try handleCppErrors(&ret)
        return ListenerCallerMarshaller.fromCpp(ret)
    }
}
