// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from test.djinni

import DjinniSupport
import DjinniSupportCxx
import Foundation
import TestSuite
import TestSuiteCxx

/**
 * Helper methods used by various different tests.
 * (Second line of multi-line documentation.
 *   Indented third line of multi-line documentation.)
 */
final class TestHelpersCppProxy: DjinniSupport.CppProxy, TestSuite.TestHelpers {
    init(_ inst: djinni.swift.AnyValue) { super.init(inst:inst) } 
}
public enum TestHelpersMarshaller: DjinniSupport.Marshaller {
    public typealias SwiftType = TestSuite.TestHelpers
    public static func fromCpp(_ c: djinni.swift.AnyValue) -> SwiftType {
        return cppInterfaceToSwift(c, { TestHelpersCppProxy(c) as SwiftType })
    }
    public static func toCpp(_ s: SwiftType) -> djinni.swift.AnyValue {
        return swiftInterfaceToCpp(s, { fatalError("n/a") })
    }
}
public class TestHelpers_statics {
    public static func getSetRecord() throws -> TestSuite.SetRecord {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getSetRecord(&_params)
        try handleCppErrors(&ret)
        return SetRecordMarshaller.fromCpp(ret)
    }
    public static func checkSetRecord(_ rec: TestSuite.SetRecord) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(SetRecordMarshaller.toCpp(rec))
        var ret = djinni_generated.TestHelpers_checkSetRecord(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    public static func getPrimitiveList() throws -> TestSuite.PrimitiveList {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getPrimitiveList(&_params)
        try handleCppErrors(&ret)
        return PrimitiveListMarshaller.fromCpp(ret)
    }
    public static func checkPrimitiveList(_ pl: TestSuite.PrimitiveList) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(PrimitiveListMarshaller.toCpp(pl))
        var ret = djinni_generated.TestHelpers_checkPrimitiveList(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    public static func getNestedCollection() throws -> TestSuite.NestedCollection {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getNestedCollection(&_params)
        try handleCppErrors(&ret)
        return NestedCollectionMarshaller.fromCpp(ret)
    }
    public static func checkNestedCollection(_ nc: TestSuite.NestedCollection) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(NestedCollectionMarshaller.toCpp(nc))
        var ret = djinni_generated.TestHelpers_checkNestedCollection(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    public static func getMap() throws -> Dictionary<String, Int64> {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getMap(&_params)
        try handleCppErrors(&ret)
        return MapMarshaller<StringMarshaller, I64Marshaller>.fromCpp(ret)
    }
    public static func checkMap(_ m: Dictionary<String, Int64>) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(MapMarshaller<StringMarshaller, I64Marshaller>.toCpp(m))
        var ret = djinni_generated.TestHelpers_checkMap(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    public static func getEmptyMap() throws -> Dictionary<String, Int64> {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getEmptyMap(&_params)
        try handleCppErrors(&ret)
        return MapMarshaller<StringMarshaller, I64Marshaller>.fromCpp(ret)
    }
    public static func checkEmptyMap(_ m: Dictionary<String, Int64>) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(MapMarshaller<StringMarshaller, I64Marshaller>.toCpp(m))
        var ret = djinni_generated.TestHelpers_checkEmptyMap(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    public static func getMapListRecord() throws -> TestSuite.MapListRecord {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getMapListRecord(&_params)
        try handleCppErrors(&ret)
        return MapListRecordMarshaller.fromCpp(ret)
    }
    public static func checkMapListRecord(_ m: TestSuite.MapListRecord) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(MapListRecordMarshaller.toCpp(m))
        var ret = djinni_generated.TestHelpers_checkMapListRecord(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    public static func checkClientInterfaceAscii(_ i: TestSuite.ClientInterface) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(ClientInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkClientInterfaceAscii(&_params)
        try handleCppErrors(&ret)
    }
    public static func checkClientInterfaceNonascii(_ i: TestSuite.ClientInterface) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(ClientInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkClientInterfaceNonascii(&_params)
        try handleCppErrors(&ret)
    }
    public static func checkClientInterfaceArgs(_ i: TestSuite.ClientInterface) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(ClientInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkClientInterfaceArgs(&_params)
        try handleCppErrors(&ret)
    }
    public static func checkEnumMap(_ m: Dictionary<TestSuite.Color, String>) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(MapMarshaller<ColorMarshaller, StringMarshaller>.toCpp(m))
        var ret = djinni_generated.TestHelpers_checkEnumMap(&_params)
        try handleCppErrors(&ret)
    }
    public static func checkEnum(_ c: TestSuite.Color) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(ColorMarshaller.toCpp(c))
        var ret = djinni_generated.TestHelpers_checkEnum(&_params)
        try handleCppErrors(&ret)
    }
    public static func tokenId(_ t: Optional<TestSuite.UserToken>) throws -> Optional<TestSuite.UserToken> {
        var _params = djinni.swift.ParameterList()
        _params.addValue(OptionalMarshaller<UserTokenMarshaller>.toCpp(t))
        var ret = djinni_generated.TestHelpers_tokenId(&_params)
        try handleCppErrors(&ret)
        return OptionalMarshaller<UserTokenMarshaller>.fromCpp(ret)
    }
    public static func createCppToken() throws -> TestSuite.UserToken {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_createCppToken(&_params)
        try handleCppErrors(&ret)
        return UserTokenMarshaller.fromCpp(ret)
    }
    public static func checkCppToken(_ t: TestSuite.UserToken) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(UserTokenMarshaller.toCpp(t))
        var ret = djinni_generated.TestHelpers_checkCppToken(&_params)
        try handleCppErrors(&ret)
    }
    public static func cppTokenId(_ t: TestSuite.UserToken) throws -> Int64 {
        var _params = djinni.swift.ParameterList()
        _params.addValue(UserTokenMarshaller.toCpp(t))
        var ret = djinni_generated.TestHelpers_cppTokenId(&_params)
        try handleCppErrors(&ret)
        return I64Marshaller.fromCpp(ret)
    }
    public static func checkTokenType(_ t: TestSuite.UserToken, type: String) throws -> Void {
        var _params = djinni.swift.ParameterList()
        _params.addValue(UserTokenMarshaller.toCpp(t))
        _params.addValue(StringMarshaller.toCpp(type))
        var ret = djinni_generated.TestHelpers_checkTokenType(&_params)
        try handleCppErrors(&ret)
    }
    public static func returnNone() throws -> Optional<Int32> {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_returnNone(&_params)
        try handleCppErrors(&ret)
        return OptionalMarshaller<I32Marshaller>.fromCpp(ret)
    }
    public static func assortedPrimitivesId(_ i: TestSuite.AssortedPrimitives) throws -> TestSuite.AssortedPrimitives {
        var _params = djinni.swift.ParameterList()
        _params.addValue(AssortedPrimitivesMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_assortedPrimitivesId(&_params)
        try handleCppErrors(&ret)
        return AssortedPrimitivesMarshaller.fromCpp(ret)
    }
    public static func idBinary(_ b: Data) throws -> Data {
        var _params = djinni.swift.ParameterList()
        _params.addValue(BinaryMarshaller.toCpp(b))
        var ret = djinni_generated.TestHelpers_idBinary(&_params)
        try handleCppErrors(&ret)
        return BinaryMarshaller.fromCpp(ret)
    }
    public static func getAsyncResult() throws -> DjinniSupport.DJFuture<Int32> {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getAsyncResult(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.FutureMarshaller<I32Marshaller>.fromCpp(ret)
    }
    public static func futureRoundtrip(_ f: DjinniSupport.DJFuture<Int32>) throws -> DjinniSupport.DJFuture<String> {
        var _params = djinni.swift.ParameterList()
        _params.addValue(DjinniSupport.FutureMarshaller<I32Marshaller>.toCpp(f))
        var ret = djinni_generated.TestHelpers_futureRoundtrip(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.FutureMarshaller<StringMarshaller>.fromCpp(ret)
    }
    public static func asyncEarlyThrow() throws -> DjinniSupport.DJFuture<Int32> {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_asyncEarlyThrow(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.FutureMarshaller<I32Marshaller>.fromCpp(ret)
    }
    public static func voidAsyncMethod(_ f: DjinniSupport.DJFuture<Void>) throws -> DjinniSupport.DJFuture<Void> {
        var _params = djinni.swift.ParameterList()
        _params.addValue(DjinniSupport.FutureMarshaller<Void_Marshaller>.toCpp(f))
        var ret = djinni_generated.TestHelpers_voidAsyncMethod(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.FutureMarshaller<Void_Marshaller>.fromCpp(ret)
    }
    public static func addOneIfPresent(_ f: DjinniSupport.DJFuture<Optional<Int32>>) throws -> DjinniSupport.DJFuture<Optional<Int32>> {
        var _params = djinni.swift.ParameterList()
        _params.addValue(DjinniSupport.FutureMarshaller<OptionalMarshaller<I32Marshaller>>.toCpp(f))
        var ret = djinni_generated.TestHelpers_addOneIfPresent(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.FutureMarshaller<OptionalMarshaller<I32Marshaller>>.fromCpp(ret)
    }
    public static func returnExceptionString(_ f: DjinniSupport.DJFuture<Int32>) throws -> DjinniSupport.DJFuture<String> {
        var _params = djinni.swift.ParameterList()
        _params.addValue(DjinniSupport.FutureMarshaller<I32Marshaller>.toCpp(f))
        var ret = djinni_generated.TestHelpers_returnExceptionString(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.FutureMarshaller<StringMarshaller>.fromCpp(ret)
    }
    public static func checkAsyncInterface(_ i: TestSuite.AsyncInterface) throws -> DjinniSupport.DJFuture<String> {
        var _params = djinni.swift.ParameterList()
        _params.addValue(AsyncInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkAsyncInterface(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.FutureMarshaller<StringMarshaller>.fromCpp(ret)
    }
    public static func checkAsyncComposition(_ i: TestSuite.AsyncInterface) throws -> DjinniSupport.DJFuture<String> {
        var _params = djinni.swift.ParameterList()
        _params.addValue(AsyncInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkAsyncComposition(&_params)
        try handleCppErrors(&ret)
        return DjinniSupport.FutureMarshaller<StringMarshaller>.fromCpp(ret)
    }
    public static func getOptionalList() throws -> Array<Optional<String>> {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getOptionalList(&_params)
        try handleCppErrors(&ret)
        return ListMarshaller<OptionalMarshaller<StringMarshaller>>.fromCpp(ret)
    }
    public static func checkOptionalList(_ ol: Array<Optional<String>>) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(ListMarshaller<OptionalMarshaller<StringMarshaller>>.toCpp(ol))
        var ret = djinni_generated.TestHelpers_checkOptionalList(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    public static func getOptionalSet() throws -> Set<Optional<String>> {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getOptionalSet(&_params)
        try handleCppErrors(&ret)
        return SetMarshaller<OptionalMarshaller<StringMarshaller>>.fromCpp(ret)
    }
    public static func checkOptionalSet(_ os: Set<Optional<String>>) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(SetMarshaller<OptionalMarshaller<StringMarshaller>>.toCpp(os))
        var ret = djinni_generated.TestHelpers_checkOptionalSet(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    public static func getOptionalMap() throws -> Dictionary<Optional<String>, Optional<String>> {
        var _params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getOptionalMap(&_params)
        try handleCppErrors(&ret)
        return MapMarshaller<OptionalMarshaller<StringMarshaller>, OptionalMarshaller<StringMarshaller>>.fromCpp(ret)
    }
    public static func checkOptionalMap(_ om: Dictionary<Optional<String>, Optional<String>>) throws -> Bool {
        var _params = djinni.swift.ParameterList()
        _params.addValue(MapMarshaller<OptionalMarshaller<StringMarshaller>, OptionalMarshaller<StringMarshaller>>.toCpp(om))
        var ret = djinni_generated.TestHelpers_checkOptionalMap(&_params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
}
