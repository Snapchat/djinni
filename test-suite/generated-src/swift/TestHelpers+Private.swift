// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from test.djinni

import DjinniSupport
import DjinniSupportCxx
import Foundation
import TestSuite
import TestSuiteCxx

/**
 * Helper methods used by various different tests.
 * (Second line of multi-line documentation.
 *   Indented third line of multi-line documentation.)
 */
final class TestHelpersCppProxy: DjinniSupport.CppProxy, TestSuite.TestHelpers {
    init(_ inst: djinni.swift.AnyValue) { super.init(inst:inst) } 
}
enum TestHelpersMarshaller: DjinniSupport.Marshaller {
    typealias SwiftType = TestSuite.TestHelpers
    static func fromCpp(_ c: djinni.swift.AnyValue) -> SwiftType {
        return cppInterfaceToSwift(c, { TestHelpersCppProxy(c) as SwiftType })
    }
    static func toCpp(_ s: SwiftType) -> djinni.swift.AnyValue {
        return swiftInterfaceToCpp(s, { fatalError("n/a") })
    }
}
public class TestHelpers_statics {
    static func getSetRecord() throws -> TestSuite.SetRecord {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getSetRecord(&params)
        try handleCppErrors(&ret)
        return SetRecordMarshaller.fromCpp(ret)
    }
    static func checkSetRecord(_ rec: TestSuite.SetRecord) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(SetRecordMarshaller.toCpp(rec))
        var ret = djinni_generated.TestHelpers_checkSetRecord(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    static func getPrimitiveList() throws -> TestSuite.PrimitiveList {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getPrimitiveList(&params)
        try handleCppErrors(&ret)
        return PrimitiveListMarshaller.fromCpp(ret)
    }
    static func checkPrimitiveList(_ pl: TestSuite.PrimitiveList) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(PrimitiveListMarshaller.toCpp(pl))
        var ret = djinni_generated.TestHelpers_checkPrimitiveList(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    static func getNestedCollection() throws -> TestSuite.NestedCollection {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getNestedCollection(&params)
        try handleCppErrors(&ret)
        return NestedCollectionMarshaller.fromCpp(ret)
    }
    static func checkNestedCollection(_ nc: TestSuite.NestedCollection) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(NestedCollectionMarshaller.toCpp(nc))
        var ret = djinni_generated.TestHelpers_checkNestedCollection(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    static func getMap() throws -> Dictionary<String, Int64> {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getMap(&params)
        try handleCppErrors(&ret)
        return MapMarshaller<StringMarshaller, I64Marshaller>.fromCpp(ret)
    }
    static func checkMap(_ m: Dictionary<String, Int64>) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(MapMarshaller<StringMarshaller, I64Marshaller>.toCpp(m))
        var ret = djinni_generated.TestHelpers_checkMap(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    static func getEmptyMap() throws -> Dictionary<String, Int64> {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getEmptyMap(&params)
        try handleCppErrors(&ret)
        return MapMarshaller<StringMarshaller, I64Marshaller>.fromCpp(ret)
    }
    static func checkEmptyMap(_ m: Dictionary<String, Int64>) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(MapMarshaller<StringMarshaller, I64Marshaller>.toCpp(m))
        var ret = djinni_generated.TestHelpers_checkEmptyMap(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    static func getMapListRecord() throws -> TestSuite.MapListRecord {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getMapListRecord(&params)
        try handleCppErrors(&ret)
        return MapListRecordMarshaller.fromCpp(ret)
    }
    static func checkMapListRecord(_ m: TestSuite.MapListRecord) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(MapListRecordMarshaller.toCpp(m))
        var ret = djinni_generated.TestHelpers_checkMapListRecord(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    static func checkClientInterfaceAscii(_ i: TestSuite.ClientInterface) throws -> Void {
        var params = djinni.swift.ParameterList()
        params.addValue(ClientInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkClientInterfaceAscii(&params)
        try handleCppErrors(&ret)
    }
    static func checkClientInterfaceNonascii(_ i: TestSuite.ClientInterface) throws -> Void {
        var params = djinni.swift.ParameterList()
        params.addValue(ClientInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkClientInterfaceNonascii(&params)
        try handleCppErrors(&ret)
    }
    static func checkClientInterfaceArgs(_ i: TestSuite.ClientInterface) throws -> Void {
        var params = djinni.swift.ParameterList()
        params.addValue(ClientInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkClientInterfaceArgs(&params)
        try handleCppErrors(&ret)
    }
    static func checkEnumMap(_ m: Dictionary<TestSuite.Color, String>) throws -> Void {
        var params = djinni.swift.ParameterList()
        params.addValue(MapMarshaller<ColorMarshaller, StringMarshaller>.toCpp(m))
        var ret = djinni_generated.TestHelpers_checkEnumMap(&params)
        try handleCppErrors(&ret)
    }
    static func checkEnum(_ c: TestSuite.Color) throws -> Void {
        var params = djinni.swift.ParameterList()
        params.addValue(ColorMarshaller.toCpp(c))
        var ret = djinni_generated.TestHelpers_checkEnum(&params)
        try handleCppErrors(&ret)
    }
    static func tokenId(_ t: Optional<TestSuite.UserToken>) throws -> Optional<TestSuite.UserToken> {
        var params = djinni.swift.ParameterList()
        params.addValue(OptionalMarshaller<UserTokenMarshaller>.toCpp(t))
        var ret = djinni_generated.TestHelpers_tokenId(&params)
        try handleCppErrors(&ret)
        return OptionalMarshaller<UserTokenMarshaller>.fromCpp(ret)
    }
    static func createCppToken() throws -> TestSuite.UserToken {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_createCppToken(&params)
        try handleCppErrors(&ret)
        return UserTokenMarshaller.fromCpp(ret)
    }
    static func checkCppToken(_ t: TestSuite.UserToken) throws -> Void {
        var params = djinni.swift.ParameterList()
        params.addValue(UserTokenMarshaller.toCpp(t))
        var ret = djinni_generated.TestHelpers_checkCppToken(&params)
        try handleCppErrors(&ret)
    }
    static func cppTokenId(_ t: TestSuite.UserToken) throws -> Int64 {
        var params = djinni.swift.ParameterList()
        params.addValue(UserTokenMarshaller.toCpp(t))
        var ret = djinni_generated.TestHelpers_cppTokenId(&params)
        try handleCppErrors(&ret)
        return I64Marshaller.fromCpp(ret)
    }
    static func checkTokenType(_ t: TestSuite.UserToken, type: String) throws -> Void {
        var params = djinni.swift.ParameterList()
        params.addValue(UserTokenMarshaller.toCpp(t))
        params.addValue(StringMarshaller.toCpp(type))
        var ret = djinni_generated.TestHelpers_checkTokenType(&params)
        try handleCppErrors(&ret)
    }
    static func returnNone() throws -> Optional<Int32> {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_returnNone(&params)
        try handleCppErrors(&ret)
        return OptionalMarshaller<I32Marshaller>.fromCpp(ret)
    }
    static func assortedPrimitivesId(_ i: TestSuite.AssortedPrimitives) throws -> TestSuite.AssortedPrimitives {
        var params = djinni.swift.ParameterList()
        params.addValue(AssortedPrimitivesMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_assortedPrimitivesId(&params)
        try handleCppErrors(&ret)
        return AssortedPrimitivesMarshaller.fromCpp(ret)
    }
    static func idBinary(_ b: Data) throws -> Data {
        var params = djinni.swift.ParameterList()
        params.addValue(BinaryMarshaller.toCpp(b))
        var ret = djinni_generated.TestHelpers_idBinary(&params)
        try handleCppErrors(&ret)
        return BinaryMarshaller.fromCpp(ret)
    }
    static func getAsyncResult() throws -> DJFuture<Int32> {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getAsyncResult(&params)
        try handleCppErrors(&ret)
        return FutureMarshaller<I32Marshaller>.fromCpp(ret)
    }
    static func futureRoundtrip(_ f: DJFuture<Int32>) throws -> DJFuture<String> {
        var params = djinni.swift.ParameterList()
        params.addValue(FutureMarshaller<I32Marshaller>.toCpp(f))
        var ret = djinni_generated.TestHelpers_futureRoundtrip(&params)
        try handleCppErrors(&ret)
        return FutureMarshaller<StringMarshaller>.fromCpp(ret)
    }
    static func asyncEarlyThrow() throws -> DJFuture<Int32> {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_asyncEarlyThrow(&params)
        try handleCppErrors(&ret)
        return FutureMarshaller<I32Marshaller>.fromCpp(ret)
    }
    static func voidAsyncMethod(_ f: DJFuture<Void>) throws -> DJFuture<Void> {
        var params = djinni.swift.ParameterList()
        params.addValue(FutureMarshaller<Void_Marshaller>.toCpp(f))
        var ret = djinni_generated.TestHelpers_voidAsyncMethod(&params)
        try handleCppErrors(&ret)
        return FutureMarshaller<Void_Marshaller>.fromCpp(ret)
    }
    static func addOneIfPresent(_ f: DJFuture<Optional<Int32>>) throws -> DJFuture<Optional<Int32>> {
        var params = djinni.swift.ParameterList()
        params.addValue(FutureMarshaller<OptionalMarshaller<I32Marshaller>>.toCpp(f))
        var ret = djinni_generated.TestHelpers_addOneIfPresent(&params)
        try handleCppErrors(&ret)
        return FutureMarshaller<OptionalMarshaller<I32Marshaller>>.fromCpp(ret)
    }
    static func returnExceptionString(_ f: DJFuture<Int32>) throws -> DJFuture<String> {
        var params = djinni.swift.ParameterList()
        params.addValue(FutureMarshaller<I32Marshaller>.toCpp(f))
        var ret = djinni_generated.TestHelpers_returnExceptionString(&params)
        try handleCppErrors(&ret)
        return FutureMarshaller<StringMarshaller>.fromCpp(ret)
    }
    static func checkAsyncInterface(_ i: TestSuite.AsyncInterface) throws -> DJFuture<String> {
        var params = djinni.swift.ParameterList()
        params.addValue(AsyncInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkAsyncInterface(&params)
        try handleCppErrors(&ret)
        return FutureMarshaller<StringMarshaller>.fromCpp(ret)
    }
    static func checkAsyncComposition(_ i: TestSuite.AsyncInterface) throws -> DJFuture<String> {
        var params = djinni.swift.ParameterList()
        params.addValue(AsyncInterfaceMarshaller.toCpp(i))
        var ret = djinni_generated.TestHelpers_checkAsyncComposition(&params)
        try handleCppErrors(&ret)
        return FutureMarshaller<StringMarshaller>.fromCpp(ret)
    }
    static func getOptionalList() throws -> Array<Optional<String>> {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getOptionalList(&params)
        try handleCppErrors(&ret)
        return ListMarshaller<OptionalMarshaller<StringMarshaller>>.fromCpp(ret)
    }
    static func checkOptionalList(_ ol: Array<Optional<String>>) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(ListMarshaller<OptionalMarshaller<StringMarshaller>>.toCpp(ol))
        var ret = djinni_generated.TestHelpers_checkOptionalList(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    static func getOptionalSet() throws -> Set<Optional<String>> {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getOptionalSet(&params)
        try handleCppErrors(&ret)
        return SetMarshaller<OptionalMarshaller<StringMarshaller>>.fromCpp(ret)
    }
    static func checkOptionalSet(_ os: Set<Optional<String>>) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(SetMarshaller<OptionalMarshaller<StringMarshaller>>.toCpp(os))
        var ret = djinni_generated.TestHelpers_checkOptionalSet(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
    static func getOptionalMap() throws -> Dictionary<Optional<String>, Optional<String>> {
        var params = djinni.swift.ParameterList()
        var ret = djinni_generated.TestHelpers_getOptionalMap(&params)
        try handleCppErrors(&ret)
        return MapMarshaller<OptionalMarshaller<StringMarshaller>, OptionalMarshaller<StringMarshaller>>.fromCpp(ret)
    }
    static func checkOptionalMap(_ om: Dictionary<Optional<String>, Optional<String>>) throws -> Bool {
        var params = djinni.swift.ParameterList()
        params.addValue(MapMarshaller<OptionalMarshaller<StringMarshaller>, OptionalMarshaller<StringMarshaller>>.toCpp(om))
        var ret = djinni_generated.TestHelpers_checkOptionalMap(&params)
        try handleCppErrors(&ret)
        return BoolMarshaller.fromCpp(ret)
    }
}
