// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from duration.djinni

import DjinniSupport
import DjinniSupportCxx
import Foundation
import TestSuite
import TestSuiteCxx

final class TestDurationCppProxy: DjinniSupport.CppProxy, TestSuite.TestDuration {
    init(_ inst: djinni.swift.AnyValue) { super.init(inst:inst) } 
}
public enum TestDurationMarshaller: DjinniSupport.Marshaller {
    public typealias SwiftType = TestSuite.TestDuration
    public static func fromCpp(_ c: djinni.swift.AnyValue) -> SwiftType {
        return cppInterfaceToSwift(c, { TestDurationCppProxy(c) as SwiftType })
    }
    public static func toCpp(_ s: SwiftType) -> djinni.swift.AnyValue {
        return swiftInterfaceToCpp(s, { fatalError("n/a") })
    }
}
public class TestDuration_statics {
    public static func hoursString(_ dt: Duration) throws -> String {
        var _params = djinni.swift.ParameterList()
        _params.addValue(TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationH>.toCpp(dt))
        var ret = djinni_generated.TestDuration_hoursString(&_params)
        try handleCppErrors(&ret)
        return StringMarshaller.fromCpp(ret)
    }
    public static func minutesString(_ dt: Duration) throws -> String {
        var _params = djinni.swift.ParameterList()
        _params.addValue(TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationMin>.toCpp(dt))
        var ret = djinni_generated.TestDuration_minutesString(&_params)
        try handleCppErrors(&ret)
        return StringMarshaller.fromCpp(ret)
    }
    public static func secondsString(_ dt: Duration) throws -> String {
        var _params = djinni.swift.ParameterList()
        _params.addValue(TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationS>.toCpp(dt))
        var ret = djinni_generated.TestDuration_secondsString(&_params)
        try handleCppErrors(&ret)
        return StringMarshaller.fromCpp(ret)
    }
    public static func millisString(_ dt: Duration) throws -> String {
        var _params = djinni.swift.ParameterList()
        _params.addValue(TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationMs>.toCpp(dt))
        var ret = djinni_generated.TestDuration_millisString(&_params)
        try handleCppErrors(&ret)
        return StringMarshaller.fromCpp(ret)
    }
    public static func microsString(_ dt: Duration) throws -> String {
        var _params = djinni.swift.ParameterList()
        _params.addValue(TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationUs>.toCpp(dt))
        var ret = djinni_generated.TestDuration_microsString(&_params)
        try handleCppErrors(&ret)
        return StringMarshaller.fromCpp(ret)
    }
    public static func nanosString(_ dt: Duration) throws -> String {
        var _params = djinni.swift.ParameterList()
        _params.addValue(TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationNs>.toCpp(dt))
        var ret = djinni_generated.TestDuration_nanosString(&_params)
        try handleCppErrors(&ret)
        return StringMarshaller.fromCpp(ret)
    }
    public static func hours(_ count: Int32) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(I32Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_hours(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationH>.fromCpp(ret)
    }
    public static func minutes(_ count: Int32) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(I32Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_minutes(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationMin>.fromCpp(ret)
    }
    public static func seconds(_ count: Int32) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(I32Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_seconds(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationS>.fromCpp(ret)
    }
    public static func millis(_ count: Int32) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(I32Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_millis(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationMs>.fromCpp(ret)
    }
    public static func micros(_ count: Int32) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(I32Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_micros(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationUs>.fromCpp(ret)
    }
    public static func nanos(_ count: Int32) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(I32Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_nanos(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<I32Marshaller, TestSuite.DurationNs>.fromCpp(ret)
    }
    public static func hoursf(_ count: Double) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(F64Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_hoursf(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<F64Marshaller, TestSuite.DurationH>.fromCpp(ret)
    }
    public static func minutesf(_ count: Double) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(F64Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_minutesf(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<F64Marshaller, TestSuite.DurationMin>.fromCpp(ret)
    }
    public static func secondsf(_ count: Double) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(F64Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_secondsf(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<F64Marshaller, TestSuite.DurationS>.fromCpp(ret)
    }
    public static func millisf(_ count: Double) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(F64Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_millisf(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<F64Marshaller, TestSuite.DurationMs>.fromCpp(ret)
    }
    public static func microsf(_ count: Double) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(F64Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_microsf(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<F64Marshaller, TestSuite.DurationUs>.fromCpp(ret)
    }
    public static func nanosf(_ count: Double) throws -> Duration {
        var _params = djinni.swift.ParameterList()
        _params.addValue(F64Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_nanosf(&_params)
        try handleCppErrors(&ret)
        return TestSuite.DurationMarshaller<F64Marshaller, TestSuite.DurationNs>.fromCpp(ret)
    }
    public static func box(_ count: Int64) throws -> Optional<Duration> {
        var _params = djinni.swift.ParameterList()
        _params.addValue(I64Marshaller.toCpp(count))
        var ret = djinni_generated.TestDuration_box(&_params)
        try handleCppErrors(&ret)
        return OptionalMarshaller<TestSuite.DurationMarshaller<I64Marshaller, TestSuite.DurationS>>.fromCpp(ret)
    }
    public static func unbox(_ dt: Optional<Duration>) throws -> Int64 {
        var _params = djinni.swift.ParameterList()
        _params.addValue(OptionalMarshaller<TestSuite.DurationMarshaller<I64Marshaller, TestSuite.DurationS>>.toCpp(dt))
        var ret = djinni_generated.TestDuration_unbox(&_params)
        try handleCppErrors(&ret)
        return I64Marshaller.fromCpp(ret)
    }
}
