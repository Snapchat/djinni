// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from exception.djinni

#import "DBCppExceptionViewModel+Private.h"
#import "DBCppExceptionViewModel.h"
#import "DBThrowingInterfaceViewModel+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DBCppExceptionViewModel ()

- (id)initWithCpp:(const std::shared_ptr<::testsuite::CppException>&)cppRef;

@end

@implementation DBCppExceptionViewModel {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::testsuite::CppException>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::testsuite::CppException>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int32_t)throwAnException {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->throw_an_exception();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)callThrowingInterface:(nullable DBThrowingInterfaceViewModel *)cb {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->call_throwing_interface(::djinni_generated::ThrowingInterface::toCpp(cb));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)callThrowingAndCatch:(nullable DBThrowingInterfaceViewModel *)cb {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->call_throwing_and_catch(::djinni_generated::ThrowingInterface::toCpp(cb));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable DBCppExceptionViewModel *)get {
    try {
        auto objcpp_result_ = ::testsuite::CppException::get();
        return ::djinni_generated::CppException::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto CppException::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto CppException::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<DBCppExceptionViewModel>(cpp);
}

} // namespace djinni_generated

@end
