// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from yaml-test.djinni

#import "DBExternInterface1ViewModel+Private.h"
#import "DBExternInterface1ViewModel.h"
#import "DBClientInterfaceViewModel+Private.h"
#import "DBClientReturnedRecordViewModel+Private.h"
#import "DBColorViewModel+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DBExternInterface1ViewModel ()

- (id)initWithCpp:(const std::shared_ptr<::ExternInterface1>&)cppRef;

@end

@implementation DBExternInterface1ViewModel {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ExternInterface1>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ExternInterface1>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull DBClientReturnedRecordViewModel *)foo:(nullable id<DBClientInterfaceViewModel>)i {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->foo(::djinni_generated::ClientInterface::toCpp(i));
        return ::djinni_generated::ClientReturnedRecord::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (DBColorViewModel)bar:(DBColorViewModel)e {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->bar(::djinni::Enum<::testsuite::color, DBColorViewModel>::toCpp(e));
        return ::djinni::Enum<::testsuite::color, DBColorViewModel>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ExternInterface1::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ExternInterface1::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<DBExternInterface1ViewModel>(cpp);
}

} // namespace djinni_generated

@end
