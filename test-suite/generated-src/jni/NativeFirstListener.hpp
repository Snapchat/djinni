// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from multiple_inheritance.djinni

#pragma once

#include "djinni_support.hpp"
#include "first_listener.hpp"

namespace djinni_generated {

class NativeFirstListener final : ::djinni::JniInterface<::testsuite::FirstListener, NativeFirstListener> {
public:
    using CppType = std::shared_ptr<::testsuite::FirstListener>;
    using CppOptType = std::shared_ptr<::testsuite::FirstListener>;
    using JniType = jobject;

    using Boxed = NativeFirstListener;

    ~NativeFirstListener();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) {
        DJINNI_ASSERT_MSG(j, jniEnv, "NativeFirstListener::toCpp requires a non-null Java object");
        return ::djinni::JniClass<NativeFirstListener>::get()._fromJava(jniEnv, j);
    };
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeFirstListener>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) {
        DJINNI_ASSERT_MSG(c, jniEnv, "NativeFirstListener::fromCpp requires a non-null C++ object");
        return fromCppOpt(jniEnv, c);
    }

private:
    NativeFirstListener();
    friend ::djinni::JniClass<NativeFirstListener>;
    friend ::djinni::JniInterface<::testsuite::FirstListener, NativeFirstListener>;

};

}  // namespace djinni_generated
