// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from outcome.djinni

#include "NativeTestOutcome.hpp"  // my header
#include "Marshal.hpp"
#include "NativeNestedOutcome.hpp"
#include "Outcome_jni.hpp"

namespace djinni_generated {

NativeTestOutcome::NativeTestOutcome() : ::djinni::JniInterface<::testsuite::TestOutcome, NativeTestOutcome>("com/dropbox/djinni/test/TestOutcome$CppProxy") {}

NativeTestOutcome::~NativeTestOutcome() = default;


CJNIEXPORT void JNICALL Java_com_dropbox_djinni_test_TestOutcome_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::testsuite::TestOutcome>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT ::djinni::Outcome<::djinni::String, ::djinni::I32>::JniType JNICALL Java_com_dropbox_djinni_test_TestOutcome_getSuccessOutcome(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        auto r = ::testsuite::TestOutcome::getSuccessOutcome();
        return ::djinni::release(::djinni::Outcome<::djinni::String, ::djinni::I32>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT ::djinni::Outcome<::djinni::String, ::djinni::I32>::JniType JNICALL Java_com_dropbox_djinni_test_TestOutcome_getErrorOutcome(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        auto r = ::testsuite::TestOutcome::getErrorOutcome();
        return ::djinni::release(::djinni::Outcome<::djinni::String, ::djinni::I32>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_dropbox_djinni_test_TestOutcome_putSuccessOutcome(JNIEnv* jniEnv, jobject /*this*/, ::djinni::Outcome<::djinni::String, ::djinni::I32>::JniType j_x)
{
    try {
        auto r = ::testsuite::TestOutcome::putSuccessOutcome(::djinni::Outcome<::djinni::String, ::djinni::I32>::toCpp(jniEnv, j_x));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_com_dropbox_djinni_test_TestOutcome_putErrorOutcome(JNIEnv* jniEnv, jobject /*this*/, ::djinni::Outcome<::djinni::String, ::djinni::I32>::JniType j_x)
{
    try {
        auto r = ::testsuite::TestOutcome::putErrorOutcome(::djinni::Outcome<::djinni::String, ::djinni::I32>::toCpp(jniEnv, j_x));
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_dropbox_djinni_test_TestOutcome_getNestedSuccessOutcome(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        auto r = ::testsuite::TestOutcome::getNestedSuccessOutcome();
        return ::djinni::release(::djinni_generated::NativeNestedOutcome::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_dropbox_djinni_test_TestOutcome_getNestedErrorOutcome(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        auto r = ::testsuite::TestOutcome::getNestedErrorOutcome();
        return ::djinni::release(::djinni_generated::NativeNestedOutcome::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_com_dropbox_djinni_test_TestOutcome_putNestedSuccessOutcome(JNIEnv* jniEnv, jobject /*this*/, jobject j_x)
{
    try {
        auto r = ::testsuite::TestOutcome::putNestedSuccessOutcome(::djinni_generated::NativeNestedOutcome::toCpp(jniEnv, j_x));
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_dropbox_djinni_test_TestOutcome_putNestedErrorOutcome(JNIEnv* jniEnv, jobject /*this*/, jobject j_x)
{
    try {
        auto r = ::testsuite::TestOutcome::putNestedErrorOutcome(::djinni_generated::NativeNestedOutcome::toCpp(jniEnv, j_x));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
