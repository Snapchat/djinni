// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from constants.djinni

package com.dropbox.djinni.test;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/** Record for use in constants */
public class ConstantRecord {


    /*package*/ int mSomeInteger;

    /*package*/ String mSomeString;

    public ConstantRecord(
            int someInteger,
            @Nonnull String someString) {
        this.mSomeInteger = someInteger;
        this.mSomeString = someString;
    }

    public int getSomeInteger() {
        return mSomeInteger;
    }

    public void setSomeInteger(int someInteger) {
        this.mSomeInteger = someInteger;
    }

    @Nonnull
    public String getSomeString() {
        return mSomeString;
    }

    public void setSomeString(@Nonnull String someString) {
        this.mSomeString = someString;
    }

    @Override
    public boolean equals(@CheckForNull Object obj) {
        if (!(obj instanceof ConstantRecord)) {
            return false;
        }
        ConstantRecord other = (ConstantRecord) obj;
        return this.mSomeInteger == other.mSomeInteger &&
                this.mSomeString.equals(other.mSomeString);
    }

    @Override
    public int hashCode() {
        // Pick an arbitrary non-zero starting value
        int hashCode = 17;
        hashCode = hashCode * 31 + mSomeInteger;
        hashCode = hashCode * 31 + mSomeString.hashCode();
        return hashCode;
    }

    @Override
    public String toString() {
        return "ConstantRecord{" +
                "mSomeInteger=" + mSomeInteger +
                "," + "mSomeString=" + mSomeString +
        "}";
    }

}
