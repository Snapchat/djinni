// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from test.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

public abstract class ConflictUser {
    @CheckForNull
    public abstract Conflict Conflict();

    public abstract boolean conflictArg(@Nonnull ArrayList<Conflict> cs);

    public static final class CppProxy extends ConflictUser
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public Conflict Conflict()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_Conflict(this.nativeRef);
        }
        private native Conflict native_Conflict(long _nativeRef);

        @Override
        public boolean conflictArg(ArrayList<Conflict> cs)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_conflictArg(this.nativeRef, cs);
        }
        private native boolean native_conflictArg(long _nativeRef, ArrayList<Conflict> cs);
    }
}
