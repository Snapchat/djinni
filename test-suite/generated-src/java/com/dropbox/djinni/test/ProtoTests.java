// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proto.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import djinni.test.Test.AddressBook;
import djinni.test.Test.Person;
import djinni.test2.Test2.PersistingState;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

public abstract class ProtoTests {
    @Nonnull
    public static native ArrayList<String> protoToStrings(@Nonnull AddressBook x);

    @Nonnull
    public static native AddressBook stringsToProto(@Nonnull ArrayList<String> x);

    @Nonnull
    public static native String embeddedProtoToString(@Nonnull RecordWithEmbeddedProto x);

    @Nonnull
    public static native RecordWithEmbeddedProto stringToEmbeddedProto(@Nonnull String x);

    @Nonnull
    public static native String cppProtoToString(@Nonnull PersistingState x);

    @Nonnull
    public static native PersistingState stringToCppProto(@Nonnull String x);

    @Nonnull
    public static native String embeddedCppProtoToString(@Nonnull RecordWithEmbeddedCppProto x);

    @Nonnull
    public static native RecordWithEmbeddedCppProto stringToEmbeddedCppProto(@Nonnull String x);

    @Nonnull
    public static native ArrayList<String> protoListToStrings(@Nonnull ArrayList<Person> x);

    @Nonnull
    public static native ArrayList<Person> stringsToProtoList(@Nonnull ArrayList<String> x);

    @Nonnull
    public static native String optionalProtoToString(@CheckForNull Person x);

    @CheckForNull
    public static native Person stringToOptionalProto(@Nonnull String x);

    @Nonnull
    public static native com.snapchat.djinni.Outcome<Person, Integer> stringToProtoOutcome(@Nonnull String x);

    public static final class CppProxy extends ProtoTests
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);
    }
}
