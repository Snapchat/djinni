// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from data_ref_view.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

public abstract class DataRefTest {
    public abstract void sendData(@Nonnull java.nio.ByteBuffer data);

    @Nonnull
    public abstract byte[] retriveAsBin();

    public abstract void sendMutableData(@Nonnull java.nio.ByteBuffer data);

    @Nonnull
    public abstract java.nio.ByteBuffer generateData();

    @Nonnull
    public abstract java.nio.ByteBuffer dataFromVec();

    @Nonnull
    public abstract java.nio.ByteBuffer dataFromStr();

    @Nonnull
    public abstract byte[] sendDataView(@Nonnull java.nio.ByteBuffer data);

    @Nonnull
    public abstract java.nio.ByteBuffer recvDataView();

    @CheckForNull
    public static native DataRefTest create();

    public static final class CppProxy extends DataRefTest
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void sendData(java.nio.ByteBuffer data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_sendData(this.nativeRef, data);
        }
        private native void native_sendData(long _nativeRef, java.nio.ByteBuffer data);

        @Override
        public byte[] retriveAsBin()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_retriveAsBin(this.nativeRef);
        }
        private native byte[] native_retriveAsBin(long _nativeRef);

        @Override
        public void sendMutableData(java.nio.ByteBuffer data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_sendMutableData(this.nativeRef, data);
        }
        private native void native_sendMutableData(long _nativeRef, java.nio.ByteBuffer data);

        @Override
        public java.nio.ByteBuffer generateData()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_generateData(this.nativeRef);
        }
        private native java.nio.ByteBuffer native_generateData(long _nativeRef);

        @Override
        public java.nio.ByteBuffer dataFromVec()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_dataFromVec(this.nativeRef);
        }
        private native java.nio.ByteBuffer native_dataFromVec(long _nativeRef);

        @Override
        public java.nio.ByteBuffer dataFromStr()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_dataFromStr(this.nativeRef);
        }
        private native java.nio.ByteBuffer native_dataFromStr(long _nativeRef);

        @Override
        public byte[] sendDataView(java.nio.ByteBuffer data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sendDataView(this.nativeRef, data);
        }
        private native byte[] native_sendDataView(long _nativeRef, java.nio.ByteBuffer data);

        @Override
        public java.nio.ByteBuffer recvDataView()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_recvDataView(this.nativeRef);
        }
        private native java.nio.ByteBuffer native_recvDataView(long _nativeRef);
    }
}
