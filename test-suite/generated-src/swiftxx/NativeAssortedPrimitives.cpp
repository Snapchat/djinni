// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from primtypes.djinni

#include "NativeAssortedPrimitives.hpp"  // my header

namespace djinni_generated {

djinni::swift::AnyValue NativeAssortedPrimitives::fromCpp(const ::testsuite::AssortedPrimitives& c) {
    auto ret = std::make_shared<djinni::swift::CompositeValue>();
    ret->addValue(::djinni::swift::Bool::fromCpp(c.b));
    ret->addValue(::djinni::swift::I8::fromCpp(c.eight));
    ret->addValue(::djinni::swift::I16::fromCpp(c.sixteen));
    ret->addValue(::djinni::swift::I32::fromCpp(c.thirtytwo));
    ret->addValue(::djinni::swift::I64::fromCpp(c.sixtyfour));
    ret->addValue(::djinni::swift::F32::fromCpp(c.fthirtytwo));
    ret->addValue(::djinni::swift::F64::fromCpp(c.fsixtyfour));
    ret->addValue(::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::Bool>::fromCpp(c.o_b));
    ret->addValue(::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I8>::fromCpp(c.o_eight));
    ret->addValue(::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I16>::fromCpp(c.o_sixteen));
    ret->addValue(::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I32>::fromCpp(c.o_thirtytwo));
    ret->addValue(::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I64>::fromCpp(c.o_sixtyfour));
    ret->addValue(::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::F32>::fromCpp(c.o_fthirtytwo));
    ret->addValue(::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::F64>::fromCpp(c.o_fsixtyfour));
    return {ret};
}
::testsuite::AssortedPrimitives NativeAssortedPrimitives::toCpp(const djinni::swift::AnyValue& s) {
    auto p = std::get<djinni::swift::CompositeValuePtr>(s);
    return ::testsuite::AssortedPrimitives(::djinni::swift::Bool::toCpp(p->getValue(0)), ::djinni::swift::I8::toCpp(p->getValue(1)), ::djinni::swift::I16::toCpp(p->getValue(2)), ::djinni::swift::I32::toCpp(p->getValue(3)), ::djinni::swift::I64::toCpp(p->getValue(4)), ::djinni::swift::F32::toCpp(p->getValue(5)), ::djinni::swift::F64::toCpp(p->getValue(6)), ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::Bool>::toCpp(p->getValue(7)), ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I8>::toCpp(p->getValue(8)), ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I16>::toCpp(p->getValue(9)), ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I32>::toCpp(p->getValue(10)), ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I64>::toCpp(p->getValue(11)), ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::F32>::toCpp(p->getValue(12)), ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::F64>::toCpp(p->getValue(13)));
}

} // namespace djinni_generated
