// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from test.djinni

#include "NativeTestHelpers.hpp"  // my header
#include "Future_swift.hpp"
#include "NativeAssortedPrimitives.hpp"
#include "NativeAsyncInterface.hpp"
#include "NativeClientInterface.hpp"
#include "NativeColor.hpp"
#include "NativeMapListRecord.hpp"
#include "NativeNestedCollection.hpp"
#include "NativePrimitiveList.hpp"
#include "NativeSetRecord.hpp"
#include "NativeUserToken.hpp"

namespace djinni_generated {

djinni::swift::AnyValue TestHelpers_getSetRecord(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_set_record();
    return ::djinni_generated::NativeSetRecord::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkSetRecord(const djinni::swift::ParameterList* params) try {
    auto _rec = ::djinni_generated::NativeSetRecord::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_set_record(std::move(_rec));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getPrimitiveList(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_primitive_list();
    return ::djinni_generated::NativePrimitiveList::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkPrimitiveList(const djinni::swift::ParameterList* params) try {
    auto _pl = ::djinni_generated::NativePrimitiveList::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_primitive_list(std::move(_pl));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getNestedCollection(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_nested_collection();
    return ::djinni_generated::NativeNestedCollection::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkNestedCollection(const djinni::swift::ParameterList* params) try {
    auto _nc = ::djinni_generated::NativeNestedCollection::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_nested_collection(std::move(_nc));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getMap(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_map();
    return ::djinni::swift::Map<::djinni::swift::String, ::djinni::swift::I64>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkMap(const djinni::swift::ParameterList* params) try {
    auto _m = ::djinni::swift::Map<::djinni::swift::String, ::djinni::swift::I64>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_map(std::move(_m));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getEmptyMap(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_empty_map();
    return ::djinni::swift::Map<::djinni::swift::String, ::djinni::swift::I64>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkEmptyMap(const djinni::swift::ParameterList* params) try {
    auto _m = ::djinni::swift::Map<::djinni::swift::String, ::djinni::swift::I64>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_empty_map(std::move(_m));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getMapListRecord(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_map_list_record();
    return ::djinni_generated::NativeMapListRecord::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkMapListRecord(const djinni::swift::ParameterList* params) try {
    auto _m = ::djinni_generated::NativeMapListRecord::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_map_list_record(std::move(_m));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkClientInterfaceAscii(const djinni::swift::ParameterList* params) try {
    auto _i = ::djinni_generated::NativeClientInterface::toCpp(params->getValue(0));
    ::testsuite::TestHelpers::check_client_interface_ascii(std::move(_i));
    return djinni::swift::makeVoidValue();
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkClientInterfaceNonascii(const djinni::swift::ParameterList* params) try {
    auto _i = ::djinni_generated::NativeClientInterface::toCpp(params->getValue(0));
    ::testsuite::TestHelpers::check_client_interface_nonascii(std::move(_i));
    return djinni::swift::makeVoidValue();
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkClientInterfaceArgs(const djinni::swift::ParameterList* params) try {
    auto _i = ::djinni_generated::NativeClientInterface::toCpp(params->getValue(0));
    ::testsuite::TestHelpers::check_client_interface_args(std::move(_i));
    return djinni::swift::makeVoidValue();
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkEnumMap(const djinni::swift::ParameterList* params) try {
    auto _m = ::djinni::swift::Map<::djinni_generated::NativeColor, ::djinni::swift::String>::toCpp(params->getValue(0));
    ::testsuite::TestHelpers::check_enum_map(std::move(_m));
    return djinni::swift::makeVoidValue();
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkEnum(const djinni::swift::ParameterList* params) try {
    auto _c = ::djinni_generated::NativeColor::toCpp(params->getValue(0));
    ::testsuite::TestHelpers::check_enum(std::move(_c));
    return djinni::swift::makeVoidValue();
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_tokenId(const djinni::swift::ParameterList* params) try {
    auto _t = ::djinni::swift::Optional<std::experimental::optional, ::djinni_generated::NativeUserToken>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::token_id(std::move(_t));
    return ::djinni::swift::Optional<std::experimental::optional, ::djinni_generated::NativeUserToken>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_createCppToken(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::create_cpp_token();
    return ::djinni_generated::NativeUserToken::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkCppToken(const djinni::swift::ParameterList* params) try {
    auto _t = ::djinni_generated::NativeUserToken::toCpp(params->getValue(0));
    ::testsuite::TestHelpers::check_cpp_token(std::move(_t));
    return djinni::swift::makeVoidValue();
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_cppTokenId(const djinni::swift::ParameterList* params) try {
    auto _t = ::djinni_generated::NativeUserToken::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::cpp_token_id(std::move(_t));
    return ::djinni::swift::I64::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkTokenType(const djinni::swift::ParameterList* params) try {
    auto _t = ::djinni_generated::NativeUserToken::toCpp(params->getValue(0));
    auto _type = ::djinni::swift::String::toCpp(params->getValue(1));
    ::testsuite::TestHelpers::check_token_type(std::move(_t), std::move(_type));
    return djinni::swift::makeVoidValue();
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_returnNone(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::return_none();
    return ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I32>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_assortedPrimitivesId(const djinni::swift::ParameterList* params) try {
    auto _i = ::djinni_generated::NativeAssortedPrimitives::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::assorted_primitives_id(std::move(_i));
    return ::djinni_generated::NativeAssortedPrimitives::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_idBinary(const djinni::swift::ParameterList* params) try {
    auto _b = ::djinni::swift::Binary::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::id_binary(std::move(_b));
    return ::djinni::swift::Binary::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getAsyncResult(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_async_result();
    return ::djinni::swift::FutureAdaptor<::djinni::swift::I32>::fromCpp(std::move(ret));
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_futureRoundtrip(const djinni::swift::ParameterList* params) try {
    auto _f = ::djinni::swift::FutureAdaptor<::djinni::swift::I32>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::future_roundtrip(std::move(_f));
    return ::djinni::swift::FutureAdaptor<::djinni::swift::String>::fromCpp(std::move(ret));
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_asyncEarlyThrow(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::async_early_throw();
    return ::djinni::swift::FutureAdaptor<::djinni::swift::I32>::fromCpp(std::move(ret));
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_voidAsyncMethod(const djinni::swift::ParameterList* params) try {
    auto _f = ::djinni::swift::FutureAdaptor<::djinni::swift::Void>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::void_async_method(std::move(_f));
    return ::djinni::swift::FutureAdaptor<::djinni::swift::Void>::fromCpp(std::move(ret));
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_addOneIfPresent(const djinni::swift::ParameterList* params) try {
    auto _f = ::djinni::swift::FutureAdaptor<::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I32>>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::add_one_if_present(std::move(_f));
    return ::djinni::swift::FutureAdaptor<::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::I32>>::fromCpp(std::move(ret));
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_returnExceptionString(const djinni::swift::ParameterList* params) try {
    auto _f = ::djinni::swift::FutureAdaptor<::djinni::swift::I32>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::return_exception_string(std::move(_f));
    return ::djinni::swift::FutureAdaptor<::djinni::swift::String>::fromCpp(std::move(ret));
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkAsyncInterface(const djinni::swift::ParameterList* params) try {
    auto _i = ::djinni_generated::NativeAsyncInterface::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_async_interface(std::move(_i));
    return ::djinni::swift::FutureAdaptor<::djinni::swift::String>::fromCpp(std::move(ret));
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkAsyncComposition(const djinni::swift::ParameterList* params) try {
    auto _i = ::djinni_generated::NativeAsyncInterface::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_async_composition(std::move(_i));
    return ::djinni::swift::FutureAdaptor<::djinni::swift::String>::fromCpp(std::move(ret));
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getOptionalList(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_optional_list();
    return ::djinni::swift::List<::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::String>>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkOptionalList(const djinni::swift::ParameterList* params) try {
    auto _ol = ::djinni::swift::List<::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::String>>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_optional_list(std::move(_ol));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getOptionalSet(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_optional_set();
    return ::djinni::swift::Set<::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::String>>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkOptionalSet(const djinni::swift::ParameterList* params) try {
    auto _os = ::djinni::swift::Set<::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::String>>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_optional_set(std::move(_os));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_getOptionalMap(const djinni::swift::ParameterList* params) try {
    auto ret = ::testsuite::TestHelpers::get_optional_map();
    return ::djinni::swift::Map<::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::String>, ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::String>>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestHelpers_checkOptionalMap(const djinni::swift::ParameterList* params) try {
    auto _om = ::djinni::swift::Map<::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::String>, ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::String>>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestHelpers::check_optional_map(std::move(_om));
    return ::djinni::swift::Bool::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}

} // namespace djinni_generated
