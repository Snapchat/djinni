// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from duration.djinni

#include "NativeTestDuration.hpp"  // my header
#include "Duration-swift.hpp"

namespace djinni_generated {

djinni::swift::AnyValue TestDuration_hoursString(const djinni::swift::ParameterList* params) try {
    auto _dt = ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_h>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::hoursString(std::move(_dt));
    return ::djinni::swift::String::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_minutesString(const djinni::swift::ParameterList* params) try {
    auto _dt = ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_min>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::minutesString(std::move(_dt));
    return ::djinni::swift::String::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_secondsString(const djinni::swift::ParameterList* params) try {
    auto _dt = ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_s>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::secondsString(std::move(_dt));
    return ::djinni::swift::String::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_millisString(const djinni::swift::ParameterList* params) try {
    auto _dt = ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_ms>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::millisString(std::move(_dt));
    return ::djinni::swift::String::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_microsString(const djinni::swift::ParameterList* params) try {
    auto _dt = ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_us>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::microsString(std::move(_dt));
    return ::djinni::swift::String::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_nanosString(const djinni::swift::ParameterList* params) try {
    auto _dt = ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_ns>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::nanosString(std::move(_dt));
    return ::djinni::swift::String::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_hours(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::I32::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::hours(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_h>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_minutes(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::I32::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::minutes(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_min>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_seconds(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::I32::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::seconds(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_s>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_millis(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::I32::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::millis(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_ms>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_micros(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::I32::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::micros(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_us>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_nanos(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::I32::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::nanos(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::I32, ::djinni::swift::Duration_ns>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_hoursf(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::F64::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::hoursf(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::F64, ::djinni::swift::Duration_h>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_minutesf(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::F64::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::minutesf(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::F64, ::djinni::swift::Duration_min>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_secondsf(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::F64::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::secondsf(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::F64, ::djinni::swift::Duration_s>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_millisf(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::F64::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::millisf(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::F64, ::djinni::swift::Duration_ms>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_microsf(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::F64::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::microsf(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::F64, ::djinni::swift::Duration_us>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_nanosf(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::F64::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::nanosf(std::move(_count));
    return ::djinni::swift::Duration<::djinni::swift::F64, ::djinni::swift::Duration_ns>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_box(const djinni::swift::ParameterList* params) try {
    auto _count = ::djinni::swift::I64::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::box(std::move(_count));
    return ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::Duration<::djinni::swift::I64, ::djinni::swift::Duration_s>>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue TestDuration_unbox(const djinni::swift::ParameterList* params) try {
    auto _dt = ::djinni::swift::Optional<std::experimental::optional, ::djinni::swift::Duration<::djinni::swift::I64, ::djinni::swift::Duration_s>>::toCpp(params->getValue(0));
    auto ret = ::testsuite::TestDuration::unbox(std::move(_dt));
    return ::djinni::swift::I64::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}

} // namespace djinni_generated
