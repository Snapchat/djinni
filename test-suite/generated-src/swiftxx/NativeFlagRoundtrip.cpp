// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from enum_flags.djinni

#include "NativeFlagRoundtrip.hpp"  // my header
#include "NativeAccessFlags.hpp"
#include "NativeEmptyFlags.hpp"

namespace djinni_generated {

djinni::swift::AnyValue FlagRoundtrip_roundtripAccess(const djinni::swift::ParameterList* params) try {
    auto _flag = ::djinni_generated::NativeAccessFlags::toCpp(params->getValue(0));
    auto ret = ::testsuite::FlagRoundtrip::roundtrip_access(std::move(_flag));
    return ::djinni_generated::NativeAccessFlags::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue FlagRoundtrip_roundtripEmpty(const djinni::swift::ParameterList* params) try {
    auto _flag = ::djinni_generated::NativeEmptyFlags::toCpp(params->getValue(0));
    auto ret = ::testsuite::FlagRoundtrip::roundtrip_empty(std::move(_flag));
    return ::djinni_generated::NativeEmptyFlags::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue FlagRoundtrip_roundtripAccessBoxed(const djinni::swift::ParameterList* params) try {
    auto _flag = ::djinni::swift::Optional<std::experimental::optional, ::djinni_generated::NativeAccessFlags>::toCpp(params->getValue(0));
    auto ret = ::testsuite::FlagRoundtrip::roundtrip_access_boxed(std::move(_flag));
    return ::djinni::swift::Optional<std::experimental::optional, ::djinni_generated::NativeAccessFlags>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue FlagRoundtrip_roundtripEmptyBoxed(const djinni::swift::ParameterList* params) try {
    auto _flag = ::djinni::swift::Optional<std::experimental::optional, ::djinni_generated::NativeEmptyFlags>::toCpp(params->getValue(0));
    auto ret = ::testsuite::FlagRoundtrip::roundtrip_empty_boxed(std::move(_flag));
    return ::djinni::swift::Optional<std::experimental::optional, ::djinni_generated::NativeEmptyFlags>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}

} // namespace djinni_generated
