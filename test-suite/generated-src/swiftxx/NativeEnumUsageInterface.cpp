// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from enum.djinni

#include "NativeEnumUsageInterface.hpp"  // my header
#include "NativeColor.hpp"

namespace djinni_generated {

djinni::swift::AnyValue EnumUsageInterface_e(const djinni::swift::ParameterList* params) try {
    auto inst = NativeEnumUsageInterface::toCpp(params->getValue(0));
    auto _e = ::djinni_generated::NativeColor::toCpp(params->getValue(1));
    auto ret = inst->e(std::move(_e));
    return ::djinni_generated::NativeColor::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue EnumUsageInterface_o(const djinni::swift::ParameterList* params) try {
    auto inst = NativeEnumUsageInterface::toCpp(params->getValue(0));
    auto _o = ::djinni::swift::Optional<std::experimental::optional, ::djinni_generated::NativeColor>::toCpp(params->getValue(1));
    auto ret = inst->o(std::move(_o));
    return ::djinni::swift::Optional<std::experimental::optional, ::djinni_generated::NativeColor>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue EnumUsageInterface_l(const djinni::swift::ParameterList* params) try {
    auto inst = NativeEnumUsageInterface::toCpp(params->getValue(0));
    auto _l = ::djinni::swift::List<::djinni_generated::NativeColor>::toCpp(params->getValue(1));
    auto ret = inst->l(std::move(_l));
    return ::djinni::swift::List<::djinni_generated::NativeColor>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue EnumUsageInterface_s(const djinni::swift::ParameterList* params) try {
    auto inst = NativeEnumUsageInterface::toCpp(params->getValue(0));
    auto _s = ::djinni::swift::Set<::djinni_generated::NativeColor>::toCpp(params->getValue(1));
    auto ret = inst->s(std::move(_s));
    return ::djinni::swift::Set<::djinni_generated::NativeColor>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}
djinni::swift::AnyValue EnumUsageInterface_m(const djinni::swift::ParameterList* params) try {
    auto inst = NativeEnumUsageInterface::toCpp(params->getValue(0));
    auto _m = ::djinni::swift::Map<::djinni_generated::NativeColor, ::djinni_generated::NativeColor>::toCpp(params->getValue(1));
    auto ret = inst->m(std::move(_m));
    return ::djinni::swift::Map<::djinni_generated::NativeColor, ::djinni_generated::NativeColor>::fromCpp(ret);
}
catch (const std::exception& e) {
    return {djinni::swift::ErrorValue{ e.what(), std::current_exception()}};
}

} // namespace djinni_generated
