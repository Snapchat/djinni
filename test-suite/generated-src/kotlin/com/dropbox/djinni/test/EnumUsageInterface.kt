// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from enum.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.concurrent.atomic.AtomicBoolean;

abstract class EnumUsageInterface {
    abstract fun e(e: Color): Color

    abstract fun o(o: Color?): Color?

    abstract fun l(l: ArrayList<Color>): ArrayList<Color>

    abstract fun s(s: HashSet<Color>): HashSet<Color>

    abstract fun m(m: HashMap<Color, Color>): HashMap<Color, Color>

    class CppProxy(private val nativeRef: Long) : EnumUsageInterface() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun e(e: Color): Color  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_e(nativeRef, e)
        }
        private external fun native_e(_nativeRef: Long, e: Color): Color

        override fun o(o: Color?): Color?  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_o(nativeRef, o)
        }
        private external fun native_o(_nativeRef: Long, o: Color?): Color?

        override fun l(l: ArrayList<Color>): ArrayList<Color>  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_l(nativeRef, l)
        }
        private external fun native_l(_nativeRef: Long, l: ArrayList<Color>): ArrayList<Color>

        override fun s(s: HashSet<Color>): HashSet<Color>  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_s(nativeRef, s)
        }
        private external fun native_s(_nativeRef: Long, s: HashSet<Color>): HashSet<Color>

        override fun m(m: HashMap<Color, Color>): HashMap<Color, Color>  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_m(nativeRef, m)
        }
        private external fun native_m(_nativeRef: Long, m: HashMap<Color, Color>): HashMap<Color, Color>
    }
}
