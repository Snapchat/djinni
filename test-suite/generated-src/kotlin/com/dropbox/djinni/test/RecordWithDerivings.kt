// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from derivings.djinni

package com.dropbox.djinni.test;

import java.util.Date;

data class RecordWithDerivings(
    val mEight: Byte,
    val mSixteen: Short,
    val mThirtytwo: Int,
    val mSixtyfour: Long,
    val mFthirtytwo: Float,
    val mFsixtyfour: Double,
    val mD: Date,
    val mS: String,
) : Comparable<RecordWithDerivings> {

    override fun equals(other: Any?): Boolean  {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as RecordWithDerivings

        if (mEight != other.mEight) return false
        if (mSixteen != other.mSixteen) return false
        if (mThirtytwo != other.mThirtytwo) return false
        if (mSixtyfour != other.mSixtyfour) return false
        if (mFthirtytwo != other.mFthirtytwo) return false
        if (mFsixtyfour != other.mFsixtyfour) return false
        if (mD != other.mD) return false
        if (mS != other.mS) return false

        return true
    }

    override fun hashCode(): Int  {
        // Pick an arbitrary non-zero starting value
        var hashCode = 17;
        hashCode = hashCode * 31 + mEight
        hashCode = hashCode * 31 + mSixteen
        hashCode = hashCode * 31 + mThirtytwo
        hashCode = hashCode * 31 + mSixtyfour.hashCode()
        hashCode = hashCode * 31 + mFthirtytwo.hashCode()
        hashCode = hashCode * 31 + mFsixtyfour.hashCode()
        hashCode = hashCode * 31 + mD.hashCode()
        hashCode = hashCode * 31 + mS.hashCode()
        return hashCode
    }

    override fun toString(): String  {
        return "RecordWithDerivings {" +
                "mEight=" + mEight +
                "," + "mSixteen=" + mSixteen +
                "," + "mThirtytwo=" + mThirtytwo +
                "," + "mSixtyfour=" + mSixtyfour +
                "," + "mFthirtytwo=" + mFthirtytwo +
                "," + "mFsixtyfour=" + mFsixtyfour +
                "," + "mD=" + mD +
                "," + "mS=" + mS +
        "}"
    }


    override fun compareTo(other: RecordWithDerivings): Int  {
        var tempResult: Int
        if (this.mEight < other.mEight) {
            tempResult = -1;
        } else if (this.mEight > other.mEight) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.mSixteen < other.mSixteen) {
            tempResult = -1;
        } else if (this.mSixteen > other.mSixteen) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.mThirtytwo < other.mThirtytwo) {
            tempResult = -1;
        } else if (this.mThirtytwo > other.mThirtytwo) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.mSixtyfour < other.mSixtyfour) {
            tempResult = -1;
        } else if (this.mSixtyfour > other.mSixtyfour) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.mFthirtytwo < other.mFthirtytwo) {
            tempResult = -1;
        } else if (this.mFthirtytwo > other.mFthirtytwo) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.mFsixtyfour < other.mFsixtyfour) {
            tempResult = -1;
        } else if (this.mFsixtyfour > other.mFsixtyfour) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        tempResult = this.mD.compareTo(other.mD);
        if (tempResult != 0) {
            return tempResult
        }
        tempResult = this.mS.compareTo(other.mS);
        if (tempResult != 0) {
            return tempResult
        }
        return 0
    }
}
