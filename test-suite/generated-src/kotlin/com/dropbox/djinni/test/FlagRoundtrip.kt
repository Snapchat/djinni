// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from enum_flags.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.EnumSet;
import java.util.concurrent.atomic.AtomicBoolean;

abstract class FlagRoundtrip {

    companion object {
        external fun roundtripAccess(flag: EnumSet<AccessFlags>): EnumSet<AccessFlags>

        external fun roundtripEmpty(flag: EnumSet<EmptyFlags>): EnumSet<EmptyFlags>

        external fun roundtripAccessBoxed(flag: EnumSet<AccessFlags?>): EnumSet<AccessFlags?>

        external fun roundtripEmptyBoxed(flag: EnumSet<EmptyFlags?>): EnumSet<EmptyFlags?>
    }

    class CppProxy(private val nativeRef: Long) : FlagRoundtrip() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }
    }
}
