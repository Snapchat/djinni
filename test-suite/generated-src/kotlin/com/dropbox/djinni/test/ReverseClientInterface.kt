// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from client_interface.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

abstract class ReverseClientInterface {
    abstract fun returnStr(): String

    abstract fun methTakingInterface(i: ReverseClientInterface): String

    abstract fun methTakingOptionalInterface(i: ReverseClientInterface?): String

    companion object {

        external fun create(): ReverseClientInterface
    }

    class CppProxy(private val nativeRef: Long) : ReverseClientInterface() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun returnStr(): String  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_returnStr(nativeRef)
        }
        private external fun native_returnStr(_nativeRef: Long): String

        override fun methTakingInterface(i: ReverseClientInterface): String  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_methTakingInterface(nativeRef, i)
        }
        private external fun native_methTakingInterface(_nativeRef: Long, i: ReverseClientInterface): String

        override fun methTakingOptionalInterface(i: ReverseClientInterface?): String  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_methTakingOptionalInterface(nativeRef, i)
        }
        private external fun native_methTakingOptionalInterface(_nativeRef: Long, i: ReverseClientInterface?): String
    }
}
