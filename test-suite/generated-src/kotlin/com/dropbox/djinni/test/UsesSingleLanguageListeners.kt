// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from single_language_interfaces.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Generating and compiling this makes sure other languages don't break
 * on references to interfaces they don't need.
 */
abstract class UsesSingleLanguageListeners {
    abstract fun callForObjC(l: ObjcOnlyListener): Void

    abstract fun returnForObjC(): ObjcOnlyListener

    abstract fun callForJava(l: JavaOnlyListener): Void

    abstract fun returnForJava(): JavaOnlyListener

    class CppProxy(private val nativeRef: Long) : UsesSingleLanguageListeners() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun callForObjC(l: ObjcOnlyListener): Void  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            native_callForObjC(nativeRef, l)
        }
        private external fun native_callForObjC(_nativeRef: Long, l: ObjcOnlyListener): Void

        override fun returnForObjC(): ObjcOnlyListener  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_returnForObjC(nativeRef)
        }
        private external fun native_returnForObjC(_nativeRef: Long): ObjcOnlyListener

        override fun callForJava(l: JavaOnlyListener): Void  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            native_callForJava(nativeRef, l)
        }
        private external fun native_callForJava(_nativeRef: Long, l: JavaOnlyListener): Void

        override fun returnForJava(): JavaOnlyListener  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_returnForJava(nativeRef)
        }
        private external fun native_returnForJava(_nativeRef: Long): JavaOnlyListener
    }
}
