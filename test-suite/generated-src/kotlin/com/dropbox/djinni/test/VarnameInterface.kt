// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from varnames.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

abstract class VarnameInterface {
    /**
     * We should also rewrite parameter names in docstrings.
     * RArg should be rewritten.
     * _i_arg_ should not.
     */
    abstract fun Rmethod(RArg: VarnameRecord): VarnameRecord

    abstract fun Imethod(IArg: VarnameInterface): VarnameInterface

    class CppProxy(private val nativeRef: Long) : VarnameInterface() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun Rmethod(RArg: VarnameRecord): VarnameRecord  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_Rmethod(nativeRef, RArg)
        }
        private external fun native_Rmethod(_nativeRef: Long, RArg: VarnameRecord): VarnameRecord

        override fun Imethod(IArg: VarnameInterface): VarnameInterface  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_Imethod(nativeRef, IArg)
        }
        private external fun native_Imethod(_nativeRef: Long, IArg: VarnameInterface): VarnameInterface
    }
}
