// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from multiple_inheritance.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

/** Used for C++ multiple inheritance tests */
abstract class ReturnOne {
    abstract fun returnOne(): Byte

    companion object {

        external fun getInstance(): ReturnOne
    }

    class CppProxy(private val nativeRef: Long) : ReturnOne() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun returnOne(): Byte  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_returnOne(nativeRef)
        }
        private external fun native_returnOne(_nativeRef: Long): Byte
    }
}
