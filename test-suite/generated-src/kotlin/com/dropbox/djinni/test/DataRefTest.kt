// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from data_ref_view.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

abstract class DataRefTest {
    abstract fun sendData(data: java.nio.ByteBuffer): Void

    abstract fun retriveAsBin(): ByteArray

    abstract fun sendMutableData(data: java.nio.ByteBuffer): Void

    abstract fun generateData(): java.nio.ByteBuffer

    abstract fun dataFromVec(): java.nio.ByteBuffer

    abstract fun dataFromStr(): java.nio.ByteBuffer

    abstract fun sendDataView(data: java.nio.ByteBuffer): ByteArray

    abstract fun recvDataView(): java.nio.ByteBuffer

    companion object {

        external fun create(): DataRefTest
    }

    class CppProxy(private val nativeRef: Long) : DataRefTest() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun sendData(data: java.nio.ByteBuffer): Void  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            native_sendData(nativeRef, data)
        }
        private external fun native_sendData(_nativeRef: Long, data: java.nio.ByteBuffer): Void

        override fun retriveAsBin(): ByteArray  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_retriveAsBin(nativeRef)
        }
        private external fun native_retriveAsBin(_nativeRef: Long): ByteArray

        override fun sendMutableData(data: java.nio.ByteBuffer): Void  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            native_sendMutableData(nativeRef, data)
        }
        private external fun native_sendMutableData(_nativeRef: Long, data: java.nio.ByteBuffer): Void

        override fun generateData(): java.nio.ByteBuffer  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_generateData(nativeRef)
        }
        private external fun native_generateData(_nativeRef: Long): java.nio.ByteBuffer

        override fun dataFromVec(): java.nio.ByteBuffer  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_dataFromVec(nativeRef)
        }
        private external fun native_dataFromVec(_nativeRef: Long): java.nio.ByteBuffer

        override fun dataFromStr(): java.nio.ByteBuffer  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_dataFromStr(nativeRef)
        }
        private external fun native_dataFromStr(_nativeRef: Long): java.nio.ByteBuffer

        override fun sendDataView(data: java.nio.ByteBuffer): ByteArray  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_sendDataView(nativeRef, data)
        }
        private external fun native_sendDataView(_nativeRef: Long, data: java.nio.ByteBuffer): ByteArray

        override fun recvDataView(): java.nio.ByteBuffer  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_recvDataView(nativeRef)
        }
        private external fun native_recvDataView(_nativeRef: Long): java.nio.ByteBuffer
    }
}
