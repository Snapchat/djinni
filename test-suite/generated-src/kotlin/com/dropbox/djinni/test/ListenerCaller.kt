// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from multiple_inheritance.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Tester for the ability to call two interfaces which might be
 * implemented on the same object.  That's not relevant in all
 * languages, due to the details of multiple inheritance and object
 * comparison.
 */
abstract class ListenerCaller {
    abstract fun callFirst(): Void

    abstract fun callSecond(): Void

    companion object {

        external fun init(firstL: FirstListener, secondL: SecondListener): ListenerCaller
    }

    class CppProxy(private val nativeRef: Long) : ListenerCaller() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun callFirst(): Void  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            native_callFirst(nativeRef)
        }
        private external fun native_callFirst(_nativeRef: Long): Void

        override fun callSecond(): Void  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            native_callSecond(nativeRef)
        }
        private external fun native_callSecond(_nativeRef: Long): Void
    }
}
