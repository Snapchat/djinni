// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from extended_record.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

abstract class InterfaceUsingExtendedRecord {
    companion object {
        val CR: RecordUsingExtendedRecord =  RecordUsingExtendedRecord(
             ExtendedRecord(
                false /* mFoo */ ) /* mEr */ )
    }
    abstract fun meth(er: ExtendedRecord): ExtendedRecord

    class CppProxy(private val nativeRef: Long) : InterfaceUsingExtendedRecord() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun meth(er: ExtendedRecord): ExtendedRecord  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_meth(nativeRef, er)
        }
        private external fun native_meth(_nativeRef: Long, er: ExtendedRecord): ExtendedRecord
    }
}
