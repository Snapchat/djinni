// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from exception.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

abstract class CppException {
    abstract fun throwAnException(): Int

    abstract fun callThrowingInterface(cb: ThrowingInterface): Int

    abstract fun callThrowingAndCatch(cb: ThrowingInterface): String

    companion object {

        external fun get(): CppException
    }

    class CppProxy(private val nativeRef: Long) : CppException() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun throwAnException(): Int  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_throwAnException(nativeRef)
        }
        private external fun native_throwAnException(_nativeRef: Long): Int

        override fun callThrowingInterface(cb: ThrowingInterface): Int  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_callThrowingInterface(nativeRef, cb)
        }
        private external fun native_callThrowingInterface(_nativeRef: Long, cb: ThrowingInterface): Int

        override fun callThrowingAndCatch(cb: ThrowingInterface): String  {
            assert(!destroyed.get()) { "trying to use a destroyed object" }
            return native_callThrowingAndCatch(nativeRef, cb)
        }
        private external fun native_callThrowingAndCatch(_nativeRef: Long, cb: ThrowingInterface): String
    }
}
