// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from duration.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

abstract class TestDuration {

    companion object {
        external fun hoursString(dt: java.time.Duration): String

        external fun minutesString(dt: java.time.Duration): String

        external fun secondsString(dt: java.time.Duration): String

        external fun millisString(dt: java.time.Duration): String

        external fun microsString(dt: java.time.Duration): String

        external fun nanosString(dt: java.time.Duration): String

        external fun hours(count: Int): java.time.Duration

        external fun minutes(count: Int): java.time.Duration

        external fun seconds(count: Int): java.time.Duration

        external fun millis(count: Int): java.time.Duration

        external fun micros(count: Int): java.time.Duration

        external fun nanos(count: Int): java.time.Duration

        external fun hoursf(count: Double): java.time.Duration

        external fun minutesf(count: Double): java.time.Duration

        external fun secondsf(count: Double): java.time.Duration

        external fun millisf(count: Double): java.time.Duration

        external fun microsf(count: Double): java.time.Duration

        external fun nanosf(count: Double): java.time.Duration

        external fun box(count: Long): java.time.Duration?

        external fun unbox(dt: java.time.Duration?): Long
    }

    class CppProxy(private val nativeRef: Long) : TestDuration() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }
    }
}
