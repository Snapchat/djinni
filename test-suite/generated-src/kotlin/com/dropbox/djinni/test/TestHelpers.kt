// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from test.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Helper methods used by various different tests.
 * (Second line of multi-line documentation.
 *   Indented third line of multi-line documentation.)
 */
abstract class TestHelpers {

    companion object {
        /** Method with documentation */
        external fun getSetRecord(): SetRecord

        /**
         * Method with long documentation
         * (Second line of multi-line documentation.
         *   Indented third line of multi-line documentation.)
         */
        external fun checkSetRecord(rec: SetRecord): Boolean

        external fun getPrimitiveList(): PrimitiveList

        external fun checkPrimitiveList(pl: PrimitiveList): Boolean

        external fun getNestedCollection(): NestedCollection

        external fun checkNestedCollection(nc: NestedCollection): Boolean

        external fun getMap(): HashMap<String, Long>

        external fun checkMap(m: HashMap<String, Long>): Boolean

        external fun getEmptyMap(): HashMap<String, Long>

        external fun checkEmptyMap(m: HashMap<String, Long>): Boolean

        external fun getMapListRecord(): MapListRecord

        external fun checkMapListRecord(m: MapListRecord): Boolean

        external fun checkClientInterfaceAscii(i: ClientInterface): Void

        external fun checkClientInterfaceNonascii(i: ClientInterface): Void

        external fun checkClientInterfaceArgs(i: ClientInterface): Void

        external fun checkEnumMap(m: HashMap<Color, String>): Void

        external fun checkEnum(c: Color): Void

        external fun tokenId(t: UserToken?): UserToken?

        external fun createCppToken(): UserToken

        external fun checkCppToken(t: UserToken): Void

        external fun cppTokenId(t: UserToken): Long

        external fun checkTokenType(t: UserToken, type: String): Void

        external fun returnNone(): Int?

        /** Ensures that we generate integer translation code */
        external fun assortedPrimitivesId(i: AssortedPrimitives): AssortedPrimitives

        external fun idBinary(b: ByteArray): ByteArray

        external fun getAsyncResult(): com.snapchat.djinni.Future<Int>

        external fun futureRoundtrip(f: com.snapchat.djinni.Future<Int>): com.snapchat.djinni.Future<String>

        external fun asyncEarlyThrow(): com.snapchat.djinni.Future<Int>

        external fun voidAsyncMethod(f: com.snapchat.djinni.Future<Void>): com.snapchat.djinni.Future<Void>

        /**
         * If the input is empty, returns back an empty future.
         * If the input is non-empty, returns back the value plus one.
         */
        external fun addOneIfPresent(f: com.snapchat.djinni.Future<Int?>): com.snapchat.djinni.Future<Int?>

        external fun checkAsyncInterface(i: AsyncInterface): com.snapchat.djinni.Future<String>

        external fun checkAsyncComposition(i: AsyncInterface): com.snapchat.djinni.Future<String>

        external fun getOptionalList(): ArrayList<String?>

        external fun checkOptionalList(ol: ArrayList<String?>): Boolean

        external fun getOptionalSet(): HashSet<String?>

        external fun checkOptionalSet(os: HashSet<String?>): Boolean

        external fun getOptionalMap(): HashMap<String?, String?>

        external fun checkOptionalMap(om: HashMap<String?, String?>): Boolean
    }

    class CppProxy(private val nativeRef: Long) : TestHelpers() {
        private val destroyed = AtomicBoolean(false)

        init {
            if (nativeRef == 0L) throw RuntimeException("nativeRef is zero")
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @kotlin.jvm.JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }
    }
}
