// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#include "NativeAsyncInterface.hpp"  // my header
#include "Future_wasm.hpp"

namespace djinni_generated {


::djinni::Future<std::string> NativeAsyncInterface::JsProxy::future_roundtrip(::djinni::Future<int32_t> f) {
    auto ret = callMethod("futureRoundtrip", ::djinni::FutureAdaptor<::djinni::I32>::fromCpp(std::move(f)));
    checkError(ret);
    return ::djinni::FutureAdaptor<::djinni::String>::toCpp(ret);
}

namespace {
    EM_JS(void, djinni_init_testsuite_async_interface, (), {
        'testsuite'.split('.').reduce(function(path, part) {
            if (!(part in path)) { path[part] = {}}; 
            return path[part]}, Module);
        Module.testsuite.AsyncInterface = Module.testsuite_AsyncInterface
    })
}
void NativeAsyncInterface::staticInitialize() {
    static std::once_flag initOnce;
    std::call_once(initOnce, djinni_init_testsuite_async_interface);
}
EMSCRIPTEN_BINDINGS(testsuite_async_interface) {
    em::class_<::testsuite::AsyncInterface>("testsuite_AsyncInterface")
        .smart_ptr<std::shared_ptr<::testsuite::AsyncInterface>>("testsuite_AsyncInterface")
        .function("nativeDestroy", &NativeAsyncInterface::nativeDestroy)
        ;
    NativeAsyncInterface::staticInitialize();
}

}  // namespace djinni_generated
