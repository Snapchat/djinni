// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from extended_record.djinni

#include "NativeInterfaceUsingExtendedRecord.hpp"  // my header
#include "NativeExtendedRecord.hpp"
#include "NativeRecordUsingExtendedRecord.hpp"

namespace djinni_generated {

em::val NativeInterfaceUsingExtendedRecord::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "meth",
    });
    return methods;
}

em::val NativeInterfaceUsingExtendedRecord::meth(const CppType& self, const em::val& w_er) {
    auto r = self->meth(::djinni_generated::NativeExtendedRecord::toCpp(w_er));
    return ::djinni_generated::NativeExtendedRecord::fromCpp(r);
}

EMSCRIPTEN_BINDINGS(interface_using_extended_record) {
    em::class_<::testsuite::InterfaceUsingExtendedRecord>("InterfaceUsingExtendedRecord")
        .smart_ptr<std::shared_ptr<::testsuite::InterfaceUsingExtendedRecord>>("InterfaceUsingExtendedRecord")
        .function("nativeDestroy", &NativeInterfaceUsingExtendedRecord::nativeDestroy)
        .function("meth", NativeInterfaceUsingExtendedRecord::meth)
        ;
}

namespace {
    EM_JS(void, djinni_init_testsuite_interface_using_extended_record_consts, (), {
        if (!('InterfaceUsingExtendedRecord' in Module)) {
            Module.InterfaceUsingExtendedRecord = {};
        }
        Module.InterfaceUsingExtendedRecord.CR =  {
            er:  {
                foo: false
            }

        }
        ;
    })
}
void NativeInterfaceUsingExtendedRecord::staticInitialize() {
    static std::once_flag initOnce;
    std::call_once(initOnce, djinni_init_testsuite_interface_using_extended_record_consts);
}

EMSCRIPTEN_BINDINGS(testsuite_interface_using_extended_record_consts) {
    NativeInterfaceUsingExtendedRecord::staticInitialize();
}

}  // namespace djinni_generated
