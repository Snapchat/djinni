// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from exception.djinni

#include "NativeCppException.hpp"  // my header

namespace djinni_generated {

em::val NativeCppException::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "throwAnException",
    });
    return methods;
}

int32_t NativeCppException::throw_an_exception(const CppType& self) {
    auto r = self->throw_an_exception();
    return ::djinni::I32::fromCpp(r);
}
em::val NativeCppException::get() {
    auto r = ::testsuite::CppException::get();
    return ::djinni_generated::NativeCppException::fromCpp(r);
}

namespace {
    EM_JS(void, djinni_init_testsuite_cpp_exception, (), {
        'testsuite'.split('.').reduce(function(path, part) {
            if (!(part in path)) { path[part] = {}}; 
            return path[part]
        }, Module);
        Module.testsuite.CppException = Module.testsuite_CppException
    })
}
void NativeCppException::staticInitialize() {
    static std::once_flag initOnce;
    std::call_once(initOnce, djinni_init_testsuite_cpp_exception);
}
EMSCRIPTEN_BINDINGS(testsuite_cpp_exception) {
    em::class_<::testsuite::CppException>("testsuite_CppException")
        .smart_ptr<std::shared_ptr<::testsuite::CppException>>("testsuite_CppException")
        .function("nativeDestroy", &NativeCppException::nativeDestroy)
        .function("throwAnException", NativeCppException::throw_an_exception)
        .class_function("get", NativeCppException::get)
        ;
    NativeCppException::staticInitialize();
}

}  // namespace djinni_generated
