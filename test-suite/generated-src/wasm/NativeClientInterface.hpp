// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from client_interface.djinni

#pragma once

#include "client_interface.hpp"
#include "djinni_wasm.hpp"

namespace djinni_generated {

struct NativeClientInterface : ::djinni::JsInterface<::testsuite::ClientInterface, NativeClientInterface> {
    using CppType = std::shared_ptr<::testsuite::ClientInterface>;
    using CppOptType = std::shared_ptr<::testsuite::ClientInterface>;
    using JsType = em::val;
    using Boxed = NativeClientInterface;

    static CppType toCpp(JsType j) { return _fromJs(j); }
    static JsType fromCppOpt(const CppOptType& c) { return {_toJs(c)}; }
    static JsType fromCpp(const CppType& c) {
        assert(c);
        return fromCppOpt(c);
    }


    struct JsProxy: ::djinni::JsProxyBase, ::testsuite::ClientInterface, ::djinni::InstanceTracker<JsProxy> {
        JsProxy(const em::val& v) : JsProxyBase(v) {}
        ::testsuite::ClientReturnedRecord get_record(int64_t record_id,const std::string & utf8string,const std::experimental::optional<std::string> & misc) override;
        double identifier_check(const std::vector<uint8_t> & data,int32_t r,int64_t jret) override;
        std::string return_str() override;
        std::string meth_taking_interface(const /*not-null*/ std::shared_ptr<::testsuite::ClientInterface> & i) override;
        std::string meth_taking_optional_interface(const /*not-null*/ std::shared_ptr<::testsuite::ClientInterface> & i) override;
    };
};

}  // namespace djinni_generated
