// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from test.djinni

#include "NativeConflictUser.hpp"  // my header
#include "NativeConflict.hpp"

namespace djinni_generated {

em::val NativeConflictUser::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "Conflict",
        "conflictArg",
    });
    return methods;
}

em::val NativeConflictUser::Conflict(const CppType& self) {
    auto r = self->Conflict();
    return ::djinni_generated::NativeConflict::fromCpp(r);
}
bool NativeConflictUser::conflict_arg(const CppType& self, const em::val& w_cs) {
    auto r = self->conflict_arg(::djinni::Set<::djinni_generated::NativeConflict>::toCpp(w_cs));
    return ::djinni::Bool::fromCpp(r);
}

namespace {
    EM_JS(void, djinni_init_testsuite_conflict_user, (), {
        'testsuite'.split('.').reduce(function(path, part) {
            if (!path.hasOwnProperty(part)) { path[part] = {}}; 
            return path[part]
        }, Module);
        Module.testsuite.ConflictUser = Module.testsuite_ConflictUser
    })
}
void NativeConflictUser::staticInitialize() {
    static std::once_flag initOnce;
    std::call_once(initOnce, djinni_init_testsuite_conflict_user);
}
EMSCRIPTEN_BINDINGS(testsuite_conflict_user) {
    em::class_<::testsuite::ConflictUser>("testsuite_ConflictUser")
        .smart_ptr<std::shared_ptr<::testsuite::ConflictUser>>("testsuite_ConflictUser")
        .function("nativeDestroy", &NativeConflictUser::nativeDestroy)
        .function("Conflict", NativeConflictUser::Conflict)
        .function("conflictArg", NativeConflictUser::conflict_arg)
        ;
    NativeConflictUser::staticInitialize();
}

}  // namespace djinni_generated
