// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from outcome.djinni

#include "NativeTestOutcome.hpp"  // my header
#include "NativeNestedOutcome.hpp"
#include "Outcome_wasm.hpp"

namespace djinni_generated {

em::val NativeTestOutcome::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
    });
    return methods;
}

em::val NativeTestOutcome::getSuccessOutcome() {
    auto r = ::testsuite::TestOutcome::getSuccessOutcome();
    return ::djinni::Outcome<::djinni::String, ::djinni::I32>::fromCpp(r);
}
em::val NativeTestOutcome::getErrorOutcome() {
    auto r = ::testsuite::TestOutcome::getErrorOutcome();
    return ::djinni::Outcome<::djinni::String, ::djinni::I32>::fromCpp(r);
}
std::string NativeTestOutcome::putSuccessOutcome(const em::val& w_x) {
    auto r = ::testsuite::TestOutcome::putSuccessOutcome(::djinni::Outcome<::djinni::String, ::djinni::I32>::toCpp(w_x));
    return ::djinni::String::fromCpp(r);
}
int32_t NativeTestOutcome::putErrorOutcome(const em::val& w_x) {
    auto r = ::testsuite::TestOutcome::putErrorOutcome(::djinni::Outcome<::djinni::String, ::djinni::I32>::toCpp(w_x));
    return ::djinni::I32::fromCpp(r);
}
em::val NativeTestOutcome::getNestedSuccessOutcome() {
    auto r = ::testsuite::TestOutcome::getNestedSuccessOutcome();
    return ::djinni_generated::NativeNestedOutcome::fromCpp(r);
}
em::val NativeTestOutcome::getNestedErrorOutcome() {
    auto r = ::testsuite::TestOutcome::getNestedErrorOutcome();
    return ::djinni_generated::NativeNestedOutcome::fromCpp(r);
}
int32_t NativeTestOutcome::putNestedSuccessOutcome(const em::val& w_x) {
    auto r = ::testsuite::TestOutcome::putNestedSuccessOutcome(::djinni_generated::NativeNestedOutcome::toCpp(w_x));
    return ::djinni::I32::fromCpp(r);
}
std::string NativeTestOutcome::putNestedErrorOutcome(const em::val& w_x) {
    auto r = ::testsuite::TestOutcome::putNestedErrorOutcome(::djinni_generated::NativeNestedOutcome::toCpp(w_x));
    return ::djinni::String::fromCpp(r);
}

namespace {
    EM_JS(void, djinni_init_testsuite_test_outcome, (), {
        'testsuite'.split('.').reduce(function(path, part) {
            if (!path.hasOwnProperty(part)) { path[part] = {}}; 
            return path[part]
        }, Module);
        Module.testsuite.TestOutcome = Module.testsuite_TestOutcome
    })
}
void NativeTestOutcome::staticInitialize() {
    static std::once_flag initOnce;
    std::call_once(initOnce, djinni_init_testsuite_test_outcome);
}
EMSCRIPTEN_BINDINGS(testsuite_test_outcome) {
    em::class_<::testsuite::TestOutcome>("testsuite_TestOutcome")
        .smart_ptr<std::shared_ptr<::testsuite::TestOutcome>>("testsuite_TestOutcome")
        .function("nativeDestroy", &NativeTestOutcome::nativeDestroy)
        .class_function("getSuccessOutcome", NativeTestOutcome::getSuccessOutcome)
        .class_function("getErrorOutcome", NativeTestOutcome::getErrorOutcome)
        .class_function("putSuccessOutcome", NativeTestOutcome::putSuccessOutcome)
        .class_function("putErrorOutcome", NativeTestOutcome::putErrorOutcome)
        .class_function("getNestedSuccessOutcome", NativeTestOutcome::getNestedSuccessOutcome)
        .class_function("getNestedErrorOutcome", NativeTestOutcome::getNestedErrorOutcome)
        .class_function("putNestedSuccessOutcome", NativeTestOutcome::putNestedSuccessOutcome)
        .class_function("putNestedErrorOutcome", NativeTestOutcome::putNestedErrorOutcome)
        ;
    NativeTestOutcome::staticInitialize();
}

}  // namespace djinni_generated
