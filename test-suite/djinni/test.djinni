@extern "../../support-lib/future.yaml"

async_interface = interface +nc {
  future_roundtrip(f: future<i32>): future<string>;
}

# Helper methods used by various different tests.
# (Second line of multi-line documentation.
#   Indented third line of multi-line documentation.)
test_helpers = interface +c {
    # Method with documentation
    static get_set_record(): set_record;
    # Method with long documentation
    # (Second line of multi-line documentation.
    #   Indented third line of multi-line documentation.)
    static check_set_record(rec: set_record): bool;

    static get_primitive_list(): primitive_list;
    static check_primitive_list(pl: primitive_list): bool;

    static get_nested_collection(): nested_collection;
    static check_nested_collection(nc: nested_collection): bool;

    static get_map(): map<string, i64>;
    static check_map(m: map<string, i64>): bool;
    static get_empty_map(): map<string, i64>;
    static check_empty_map(m: map<string, i64>): bool;
    static get_map_list_record(): map_list_record;
    static check_map_list_record(m: map_list_record): bool;

    static check_client_interface_ascii(i: client_interface);
    static check_client_interface_nonascii(i: client_interface);
    static check_client_interface_args(i: client_interface);

    static check_enum_map(m: map<color, string>);
    static check_enum(c: color);

    static token_id(t: optional<user_token>): optional<user_token>;
    static create_cpp_token(): user_token;
    static check_cpp_token(t: user_token);
    static cpp_token_id(t: user_token): i64;
    static check_token_type(t: user_token, type: string);

    static return_none(): optional<i32>;

    # Ensures that we generate integer translation code
    static assorted_primitives_id(i: assorted_primitives): assorted_primitives;

    static id_binary(b: binary): binary;

    static get_async_result(): future<i32>;
    static future_roundtrip(f: future<i32>): future<string>;
    static async_early_throw(): future<i32>;
    static void_async_method(f: future<void>): future<void>;
    # If the input is empty, returns back an empty future.
    # If the input is non-empty, returns back the value plus one.
    static add_one_if_present(f: future<optional<i32>>): future<optional<i32>>;
    # try-catches the future f, and accesses the error message, and returns as a string.
    static return_exception_string(f: future<i32>): future<string>;

    static check_async_interface(i: async_interface): future<string>;
    static check_async_composition(i: async_interface): future<string>;

    static get_optional_list(): list<optional<string>>;
    static check_optional_list(ol: list<optional<string>>): bool;
    static get_optional_set(): set<optional<string>>;
    static check_optional_set(os: set<optional<string>>): bool;
    static get_optional_map(): map<optional<string>, optional<string>>;
    static check_optional_map(om: map<optional<string>, optional<string>>): bool;
}

# Empty record
# (Second line of multi-line documentation.
#   Indented third line of multi-line documentation.)
empty_record = record {
    
}

# Test for conflict of method name with an interface name.
# See the comments about scopeSymbols in CppMarshal.scala for more info.
Conflict = interface +c {
}
conflict_user = interface +c {
    Conflict(): Conflict;
    conflict_arg(cs: list<Conflict>): bool;
}

# we need to test optional interface
# this one will be used
sample_interface = interface +c {
}
